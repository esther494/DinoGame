
Dino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005838  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b30  08005b30  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b34  08005b34  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08005ba0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005ba0  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103fc  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  00017494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  000197c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c88  00000000  00000000  0001a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c6d  00000000  00000000  0001b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ee4  00000000  00000000  0003309d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b74  00000000  00000000  00045f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  000d7b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059c0 	.word	0x080059c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080059c0 	.word	0x080059c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <cactus_update>:
 */

#include "dino.h"
#include "i2c-lcd.h"

void cactus_update (Cactus * cactus) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	// We will move the cacti to the left by one
	for (int i = 0; i < 19; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e00b      	b.n	8000596 <cactus_update+0x26>
		cactus->locations[i] = cactus->locations[i+1];
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 19; i++) {
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b12      	cmp	r3, #18
 800059a:	ddf0      	ble.n	800057e <cactus_update+0xe>
	}

	// cactus spawning have to have at least 3 spaces for the player
	// added a feature that will spawn 2 cacti
	if (cactus->cacti == 1) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d106      	bne.n	80005b2 <cactus_update+0x42>
		cactus->locations[19] = 1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		cactus->cacti = 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	655a      	str	r2, [r3, #84]	@ 0x54
		else {
			cactus->spaces++;
			cactus->locations[19] = 0;
		}
	}
}
 80005b0:	e02e      	b.n	8000610 <cactus_update+0xa0>
		if (cactus->spaces > 2) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	dd22      	ble.n	8000600 <cactus_update+0x90>
			if (rand() % 2 == 1) {
 80005ba:	f004 f817 	bl	80045ec <rand>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	bfb8      	it	lt
 80005c8:	425b      	neglt	r3, r3
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d120      	bne.n	8000610 <cactus_update+0xa0>
				cactus->spaces = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	651a      	str	r2, [r3, #80]	@ 0x50
				cactus->locations[19] = 1;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2201      	movs	r2, #1
 80005d8:	64da      	str	r2, [r3, #76]	@ 0x4c
				if (rand() % 5 == 1) cactus->cacti = 1;
 80005da:	f004 f807 	bl	80045ec <rand>
 80005de:	4601      	mov	r1, r0
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <cactus_update+0xa8>)
 80005e2:	fb83 2301 	smull	r2, r3, r3, r1
 80005e6:	105a      	asrs	r2, r3, #1
 80005e8:	17cb      	asrs	r3, r1, #31
 80005ea:	1ad2      	subs	r2, r2, r3
 80005ec:	4613      	mov	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	1aca      	subs	r2, r1, r3
 80005f4:	2a01      	cmp	r2, #1
 80005f6:	d10b      	bne.n	8000610 <cactus_update+0xa0>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2201      	movs	r2, #1
 80005fc:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80005fe:	e007      	b.n	8000610 <cactus_update+0xa0>
			cactus->spaces++;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	651a      	str	r2, [r3, #80]	@ 0x50
			cactus->locations[19] = 0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	66666667 	.word	0x66666667

0800061c <init>:

void init (Cactus * cactus, Dino * dino, GameStatus * gamestatus) {
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 20; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e007      	b.n	800063e <init+0x22>
		cactus->locations[i] = 0;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	2100      	movs	r1, #0
 8000634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 20; i++) {
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b13      	cmp	r3, #19
 8000642:	ddf4      	ble.n	800062e <init+0x12>
	}
	cactus->spaces = 0;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	651a      	str	r2, [r3, #80]	@ 0x50
	cactus->cacti = 0;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	2200      	movs	r2, #0
 800064e:	655a      	str	r2, [r3, #84]	@ 0x54

	dino->score = 0;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
	dino->jump = 0;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	371c      	adds	r7, #28
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <display>:

void display(Cactus * cactus, Dino * dino) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	clear_screen();
 8000672:	f000 f845 	bl	8000700 <clear_screen>

	if (dino->jump >= 1) {
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	dd07      	ble.n	800068e <display+0x26>
		lcd_cursor_pos(1, 4);
 800067e:	2104      	movs	r1, #4
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f8f4 	bl	800086e <lcd_cursor_pos>
		lcd_send_data(0);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f884 	bl	8000794 <lcd_send_data>
 800068c:	e006      	b.n	800069c <display+0x34>
	}
	else {
		lcd_cursor_pos(3, 4);
 800068e:	2104      	movs	r1, #4
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f8ec 	bl	800086e <lcd_cursor_pos>
		lcd_send_data(0);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f87c 	bl	8000794 <lcd_send_data>
	}

	for (int i = 0; i < 20; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e00f      	b.n	80006c2 <display+0x5a>
		if (cactus->locations[i] == 1) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d106      	bne.n	80006bc <display+0x54>
			lcd_cursor_pos(3, i);
 80006ae:	68f9      	ldr	r1, [r7, #12]
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f8dc 	bl	800086e <lcd_cursor_pos>
			lcd_send_data(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f86c 	bl	8000794 <lcd_send_data>
	for (int i = 0; i < 20; i++) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b13      	cmp	r3, #19
 80006c6:	ddec      	ble.n	80006a2 <display+0x3a>
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <collision>:

void collision(Cactus * cactus, Dino * dino, GameStatus * gamestatus) {
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
	if (cactus->locations[4] == 1 && dino->jump == 0) {
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d106      	bne.n	80006f4 <collision+0x22>
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <collision+0x22>
		*gamestatus = over;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2202      	movs	r2, #2
 80006f2:	701a      	strb	r2, [r3, #0]
	}
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <clear_screen>:

void clear_screen() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000706:	f000 f8f5 	bl	80008f4 <lcd_clear_display>
	// for some reason, my lcd won't clear the bottom right part of the screen
	// so i have to manually send a blank space to clear them
	for (int col = 9; col <= 19; col++) {
 800070a:	2309      	movs	r3, #9
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e009      	b.n	8000724 <clear_screen+0x24>
		lcd_cursor_pos(3, col);
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	2003      	movs	r0, #3
 8000714:	f000 f8ab 	bl	800086e <lcd_cursor_pos>
		lcd_send_data(' ');
 8000718:	2020      	movs	r0, #32
 800071a:	f000 f83b 	bl	8000794 <lcd_send_data>
	for (int col = 9; col <= 19; col++) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3301      	adds	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b13      	cmp	r3, #19
 8000728:	ddf2      	ble.n	8000710 <clear_screen+0x10>
	}
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // default address

// rs is 0 for commands
void lcd_send_cmd (char cmd)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f023 030f 	bic.w	r3, r3, #15
 8000744:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f043 030c 	orr.w	r3, r3, #12
 8000752:	b2db      	uxtb	r3, r3
 8000754:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	f043 030c 	orr.w	r3, r3, #12
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	b2db      	uxtb	r3, r3
 8000772:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000774:	f107 0208 	add.w	r2, r7, #8
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2304      	movs	r3, #4
 800077e:	214e      	movs	r1, #78	@ 0x4e
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <lcd_send_cmd+0x5c>)
 8000782:	f001 fbe1 	bl	8001f48 <HAL_I2C_Master_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000084 	.word	0x20000084

08000794 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f023 030f 	bic.w	r3, r3, #15
 80007a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f043 030d 	orr.w	r3, r3, #13
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	f043 0309 	orr.w	r3, r3, #9
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	f043 030d 	orr.w	r3, r3, #13
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	f043 0309 	orr.w	r3, r3, #9
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007d4:	f107 0208 	add.w	r2, r7, #8
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2304      	movs	r3, #4
 80007de:	214e      	movs	r1, #78	@ 0x4e
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <lcd_send_data+0x5c>)
 80007e2:	f001 fbb1 	bl	8001f48 <HAL_I2C_Master_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000084 	.word	0x20000084

080007f4 <lcd_init>:

void lcd_init (void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80007f8:	2032      	movs	r0, #50	@ 0x32
 80007fa:	f000 ff5d 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007fe:	2030      	movs	r0, #48	@ 0x30
 8000800:	f7ff ff98 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000804:	2005      	movs	r0, #5
 8000806:	f000 ff57 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800080a:	2030      	movs	r0, #48	@ 0x30
 800080c:	f7ff ff92 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000810:	2001      	movs	r0, #1
 8000812:	f000 ff51 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000816:	2030      	movs	r0, #48	@ 0x30
 8000818:	f7ff ff8c 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f000 ff4b 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000822:	2020      	movs	r0, #32
 8000824:	f7ff ff86 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 ff45 	bl	80016b8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800082e:	2028      	movs	r0, #40	@ 0x28
 8000830:	f7ff ff80 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 ff3f 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800083a:	2008      	movs	r0, #8
 800083c:	f7ff ff7a 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f000 ff39 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff ff74 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 ff33 	bl	80016b8 <HAL_Delay>
	HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 ff30 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000858:	2006      	movs	r0, #6
 800085a:	f7ff ff6b 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 ff2a 	bl	80016b8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000864:	200c      	movs	r0, #12
 8000866:	f7ff ff65 	bl	8000734 <lcd_send_cmd>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <lcd_cursor_pos>:

void lcd_cursor_pos (int row, int col) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
	uint8_t address;
	if (row == 0) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <lcd_cursor_pos+0x16>
		address = col;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e016      	b.n	80008b2 <lcd_cursor_pos+0x44>
	}
	else if (row == 1) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d104      	bne.n	8000894 <lcd_cursor_pos+0x26>
		address = 0x40 + col;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3340      	adds	r3, #64	@ 0x40
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e00e      	b.n	80008b2 <lcd_cursor_pos+0x44>
	}
	else if (row == 2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d104      	bne.n	80008a4 <lcd_cursor_pos+0x36>
		address = 0x14 + col;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3314      	adds	r3, #20
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e006      	b.n	80008b2 <lcd_cursor_pos+0x44>
	}
	else if (row == 3) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d10b      	bne.n	80008c2 <lcd_cursor_pos+0x54>
		address = 0x54 + col;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3354      	adds	r3, #84	@ 0x54
 80008b0:	73fb      	strb	r3, [r7, #15]
	}
	else {
		return;
	}
	lcd_send_cmd(0x80 | address);
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff3a 	bl	8000734 <lcd_send_cmd>
 80008c0:	e000      	b.n	80008c4 <lcd_cursor_pos+0x56>
		return;
 80008c2:	bf00      	nop
}
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008d2:	e006      	b.n	80008e2 <lcd_send_string+0x18>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff59 	bl	8000794 <lcd_send_data>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f4      	bne.n	80008d4 <lcd_send_string+0xa>
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <lcd_clear_display>:

void lcd_clear_display (void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80008fa:	2080      	movs	r0, #128	@ 0x80
 80008fc:	f7ff ff1a 	bl	8000734 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	e005      	b.n	8000912 <lcd_clear_display+0x1e>
		lcd_send_data(' ');
 8000906:	2020      	movs	r0, #32
 8000908:	f7ff ff44 	bl	8000794 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b45      	cmp	r3, #69	@ 0x45
 8000916:	ddf6      	ble.n	8000906 <lcd_clear_display+0x12>
	}
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fe53 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f8e3 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 fa95 	bl	8000e60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000936:	f000 f94b 	bl	8000bd0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800093a:	f000 fa67 	bl	8000e0c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800093e:	f000 fa17 	bl	8000d70 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000942:	f000 f973 	bl	8000c2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000946:	f7ff ff55 	bl	80007f4 <lcd_init>
  lcd_clear_display();
 800094a:	f7ff ffd3 	bl	80008f4 <lcd_clear_display>
  srand(time(NULL));
 800094e:	2000      	movs	r0, #0
 8000950:	f003 ffb8 	bl	80048c4 <time>
 8000954:	4602      	mov	r2, r0
 8000956:	460b      	mov	r3, r1
 8000958:	4613      	mov	r3, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fe18 	bl	8004590 <srand>
  HAL_TIM_Base_Start_IT(&htim3);
 8000960:	4857      	ldr	r0, [pc, #348]	@ (8000ac0 <main+0x19c>)
 8000962:	f002 fb33 	bl	8002fcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000966:	2100      	movs	r1, #0
 8000968:	4856      	ldr	r0, [pc, #344]	@ (8000ac4 <main+0x1a0>)
 800096a:	f002 fbeb 	bl	8003144 <HAL_TIM_PWM_Start>

  // CUSTOM CHARACTERS
  char dino_character[] = {0x07, 0x0D, 0x06, 0x0F, 0x0E, 0x1E, 0x0E, 0x04};
 800096e:	4a56      	ldr	r2, [pc, #344]	@ (8000ac8 <main+0x1a4>)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000978:	e883 0003 	stmia.w	r3, {r0, r1}
  lcd_send_cmd(0x40);
 800097c:	2040      	movs	r0, #64	@ 0x40
 800097e:	f7ff fed9 	bl	8000734 <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(dino_character[i]); // 0
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
 8000986:	e00a      	b.n	800099e <main+0x7a>
 8000988:	f107 0218 	add.w	r2, r7, #24
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fefe 	bl	8000794 <lcd_send_data>
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	3301      	adds	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	ddf1      	ble.n	8000988 <main+0x64>

  char cactus_character[] = {0x04, 0x0F, 0x1E, 0x0E, 0x1E, 0x0F, 0x0E, 0x0E};
 80009a4:	4a49      	ldr	r2, [pc, #292]	@ (8000acc <main+0x1a8>)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ae:	e883 0003 	stmia.w	r3, {r0, r1}
  lcd_send_cmd(0x40 + 8);
 80009b2:	2048      	movs	r0, #72	@ 0x48
 80009b4:	f7ff febe 	bl	8000734 <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(cactus_character[i]); // 1
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	e00a      	b.n	80009d4 <main+0xb0>
 80009be:	f107 0210 	add.w	r2, r7, #16
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fee3 	bl	8000794 <lcd_send_data>
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	3301      	adds	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	ddf1      	ble.n	80009be <main+0x9a>

  gamestatus = menu;
 80009da:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad0 <main+0x1ac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (gamestatus == menu) {
 80009e0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad0 <main+0x1ac>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d128      	bne.n	8000a3a <main+0x116>
		  clear_screen();
 80009e8:	f7ff fe8a 	bl	8000700 <clear_screen>
		  lcd_cursor_pos(0, 5);
 80009ec:	2105      	movs	r1, #5
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff3d 	bl	800086e <lcd_cursor_pos>
		  lcd_send_string("DINO GAME!");
 80009f4:	4837      	ldr	r0, [pc, #220]	@ (8000ad4 <main+0x1b0>)
 80009f6:	f7ff ff68 	bl	80008ca <lcd_send_string>
		  lcd_cursor_pos(1, 3);
 80009fa:	2103      	movs	r1, #3
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff ff36 	bl	800086e <lcd_cursor_pos>
		  lcd_send_string("Press the blue");
 8000a02:	4835      	ldr	r0, [pc, #212]	@ (8000ad8 <main+0x1b4>)
 8000a04:	f7ff ff61 	bl	80008ca <lcd_send_string>
		  lcd_cursor_pos(2, 2);
 8000a08:	2102      	movs	r1, #2
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff ff2f 	bl	800086e <lcd_cursor_pos>
		  lcd_send_string("button to start.");
 8000a10:	4832      	ldr	r0, [pc, #200]	@ (8000adc <main+0x1b8>)
 8000a12:	f7ff ff5a 	bl	80008ca <lcd_send_string>
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000a16:	bf00      	nop
 8000a18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1c:	4830      	ldr	r0, [pc, #192]	@ (8000ae0 <main+0x1bc>)
 8000a1e:	f001 f905 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f7      	bne.n	8000a18 <main+0xf4>
		  gamestatus = in_progress;
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <main+0x1ac>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
		  init(&cactus, &dino, &gamestatus);
 8000a2e:	4a28      	ldr	r2, [pc, #160]	@ (8000ad0 <main+0x1ac>)
 8000a30:	492c      	ldr	r1, [pc, #176]	@ (8000ae4 <main+0x1c0>)
 8000a32:	482d      	ldr	r0, [pc, #180]	@ (8000ae8 <main+0x1c4>)
 8000a34:	f7ff fdf2 	bl	800061c <init>
 8000a38:	e7d2      	b.n	80009e0 <main+0xbc>
	  }
	  else if (gamestatus == in_progress) {
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <main+0x1ac>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d109      	bne.n	8000a56 <main+0x132>
		  display(&cactus, &dino);
 8000a42:	4928      	ldr	r1, [pc, #160]	@ (8000ae4 <main+0x1c0>)
 8000a44:	4828      	ldr	r0, [pc, #160]	@ (8000ae8 <main+0x1c4>)
 8000a46:	f7ff fe0f 	bl	8000668 <display>
		  collision(&cactus, &dino, &gamestatus);
 8000a4a:	4a21      	ldr	r2, [pc, #132]	@ (8000ad0 <main+0x1ac>)
 8000a4c:	4925      	ldr	r1, [pc, #148]	@ (8000ae4 <main+0x1c0>)
 8000a4e:	4826      	ldr	r0, [pc, #152]	@ (8000ae8 <main+0x1c4>)
 8000a50:	f7ff fe3f 	bl	80006d2 <collision>
 8000a54:	e7c4      	b.n	80009e0 <main+0xbc>
	  }
	  else if (gamestatus == over){
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <main+0x1ac>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d1c0      	bne.n	80009e0 <main+0xbc>
		  clear_screen();
 8000a5e:	f7ff fe4f 	bl	8000700 <clear_screen>
		  lcd_cursor_pos(0, 0);
 8000a62:	2100      	movs	r1, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ff02 	bl	800086e <lcd_cursor_pos>
		  lcd_send_string("GAME OVER!");
 8000a6a:	4820      	ldr	r0, [pc, #128]	@ (8000aec <main+0x1c8>)
 8000a6c:	f7ff ff2d 	bl	80008ca <lcd_send_string>
		  lcd_cursor_pos(1, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fefb 	bl	800086e <lcd_cursor_pos>
		  lcd_send_string("SCORE:");
 8000a78:	481d      	ldr	r0, [pc, #116]	@ (8000af0 <main+0x1cc>)
 8000a7a:	f7ff ff26 	bl	80008ca <lcd_send_string>
		  lcd_cursor_pos(2, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fef4 	bl	800086e <lcd_cursor_pos>
		  char str[10];
		  sprintf(str, "%d", dino.score);
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <main+0x1c0>)
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4919      	ldr	r1, [pc, #100]	@ (8000af4 <main+0x1d0>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 feac 	bl	80047ec <siprintf>
		  lcd_send_string(str);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff17 	bl	80008ca <lcd_send_string>
		  snd_start(&htim1, TIM_CHANNEL_1);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <main+0x1a0>)
 8000aa0:	f000 fabc 	bl	800101c <snd_start>
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000aa4:	bf00      	nop
 8000aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <main+0x1bc>)
 8000aac:	f001 f8be 	bl	8001c2c <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f7      	bne.n	8000aa6 <main+0x182>
		  gamestatus = menu;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <main+0x1ac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	  if (gamestatus == menu) {
 8000abc:	e790      	b.n	80009e0 <main+0xbc>
 8000abe:	bf00      	nop
 8000ac0:	20000120 	.word	0x20000120
 8000ac4:	200000d8 	.word	0x200000d8
 8000ac8:	08005a20 	.word	0x08005a20
 8000acc:	08005a28 	.word	0x08005a28
 8000ad0:	20000210 	.word	0x20000210
 8000ad4:	080059d8 	.word	0x080059d8
 8000ad8:	080059e4 	.word	0x080059e4
 8000adc:	080059f4 	.word	0x080059f4
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	20000208 	.word	0x20000208
 8000ae8:	200001b0 	.word	0x200001b0
 8000aec:	08005a08 	.word	0x08005a08
 8000af0:	08005a14 	.word	0x08005a14
 8000af4:	08005a1c 	.word	0x08005a1c

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fed3 	bl	80048b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b44:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b60:	2310      	movs	r3, #16
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fd3a 	bl	80025fc <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b8e:	f000 faa3 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2102      	movs	r1, #2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 ff9c 	bl	8002aec <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bba:	f000 fa8d 	bl	80010d8 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	@ 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bd6:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <MX_I2C1_Init+0x54>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <MX_I2C1_Init+0x58>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_I2C1_Init+0x50>)
 8000c0e:	f001 f857 	bl	8001cc0 <HAL_I2C_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f000 fa5e 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000084 	.word	0x20000084
 8000c24:	40005400 	.word	0x40005400
 8000c28:	000186a0 	.word	0x000186a0

08000c2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b096      	sub	sp, #88	@ 0x58
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fe24 	bl	80048b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <MX_TIM1_Init+0x140>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c70:	4b3d      	ldr	r3, [pc, #244]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c90:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c96:	4834      	ldr	r0, [pc, #208]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000c98:	f002 f948 	bl	8002f2c <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ca2:	f000 fa19 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482d      	ldr	r0, [pc, #180]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000cb4:	f002 fd0c 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cbe:	f000 fa0b 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cc2:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000cc4:	f002 f9e4 	bl	8003090 <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cce:	f000 fa03 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4821      	ldr	r0, [pc, #132]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000ce2:	f003 f8bd 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cec:	f000 f9f4 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	@ 0x60
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8000cf4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d18:	f002 fc18 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000d22:	f000 f9d9 	bl	80010d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d4a:	f003 f8f7 	bl	8003f3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000d54:	f000 f9c0 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <MX_TIM1_Init+0x13c>)
 8000d5a:	f000 fa71 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	@ 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000d8 	.word	0x200000d8
 8000d6c:	40010000 	.word	0x40010000

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <MX_TIM3_Init+0x98>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000d94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db4:	4813      	ldr	r0, [pc, #76]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000db6:	f002 f8b9 	bl	8002f2c <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dc0:	f000 f98a 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000dd2:	f002 fc7d 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 f97c 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_TIM3_Init+0x94>)
 8000dee:	f003 f837 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000df8:	f000 f96e 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000120 	.word	0x20000120
 8000e08:	40000400 	.word	0x40000400

08000e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <MX_USART2_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e44:	f003 f8e0 	bl	8004008 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 f943 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000168 	.word	0x20000168
 8000e5c:	40004400 	.word	0x40004400

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a37      	ldr	r2, [pc, #220]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a30      	ldr	r2, [pc, #192]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a29      	ldr	r2, [pc, #164]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_GPIO_Init+0xfc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2120      	movs	r1, #32
 8000eea:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <MX_GPIO_Init+0x100>)
 8000eec:	f000 feb6 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4817      	ldr	r0, [pc, #92]	@ (8000f64 <MX_GPIO_Init+0x104>)
 8000f08:	f000 fd0c 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	480f      	ldr	r0, [pc, #60]	@ (8000f60 <MX_GPIO_Init+0x100>)
 8000f24:	f000 fcfe 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <MX_GPIO_Init+0x100>)
 8000f40:	f000 fcf0 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2028      	movs	r0, #40	@ 0x28
 8000f4a:	f000 fcb4 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f4e:	2028      	movs	r0, #40	@ 0x28
 8000f50:	f000 fccd 	bl	80018ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	@ 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020800 	.word	0x40020800

08000f68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	// adds to the score based on the frequency of TIM3
	if (htim->Instance == TIM3) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d126      	bne.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x60>
		cactus_update(&cactus);
 8000f7a:	4816      	ldr	r0, [pc, #88]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f7c:	f7ff faf8 	bl	8000570 <cactus_update>
		flag = 1;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
		// wait two interrupts in the air for the dino
		if (dino.jump >= 1) {
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dd0b      	ble.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			dino.jump++;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f96:	6013      	str	r3, [r2, #0]
			if (dino.jump > 3) {
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	dd02      	ble.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x3e>
				dino.jump = 0;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
			}
		}
		if (dino.jump >= 1 && dino.jump < 3 && cactus.locations[4] == 1) {
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dd0c      	ble.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	dc08      	bgt.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d104      	bne.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x60>
			dino.score++;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fc6:	6053      	str	r3, [r2, #4]
		}
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	20000214 	.word	0x20000214
 8000fdc:	20000208 	.word	0x20000208

08000fe0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	// update the dino when button is pressed
	// this code prevents the player from jumping in the air
	if (GPIO_Pin == GPIO_PIN_10 && dino.jump == 0) {
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff0:	d109      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0x26>
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0x26>
		dino.jump = 1;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
		flag = 1;
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_GPIO_EXTI_Callback+0x38>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
	}
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000208 	.word	0x20000208
 8001018:	20000214 	.word	0x20000214

0800101c <snd_start>:

void snd_start (TIM_HandleTypeDef *htim, uint32_t tim_channel) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(1000));
 8001026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102a:	f000 f83b 	bl	80010a4 <presForFrequency>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001036:	20fa      	movs	r0, #250	@ 0xfa
 8001038:	f000 fb3e 	bl	80016b8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(3000));
 800103c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001040:	f000 f830 	bl	80010a4 <presForFrequency>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800104c:	20fa      	movs	r0, #250	@ 0xfa
 800104e:	f000 fb33 	bl	80016b8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(6000));
 8001052:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001056:	f000 f825 	bl	80010a4 <presForFrequency>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001062:	20fa      	movs	r0, #250	@ 0xfa
 8001064:	f000 fb28 	bl	80016b8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(9000));
 8001068:	f242 3028 	movw	r0, #9000	@ 0x2328
 800106c:	f000 f81a 	bl	80010a4 <presForFrequency>
 8001070:	4602      	mov	r2, r0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001078:	20fa      	movs	r0, #250	@ 0xfa
 800107a:	f000 fb1d 	bl	80016b8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(12000));
 800107e:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001082:	f000 f80f 	bl	80010a4 <presForFrequency>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800108e:	20fa      	movs	r0, #250	@ 0xfa
 8001090:	f000 fb12 	bl	80016b8 <HAL_Delay>
	HAL_TIM_PWM_Stop(htim, tim_channel);
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 f904 	bl	80032a4 <HAL_TIM_PWM_Stop>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <presForFrequency>:

int presForFrequency (int frequency)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if (frequency == 0) return 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <presForFrequency+0x12>
 80010b2:	2300      	movs	r3, #0
 80010b4:	e008      	b.n	80010c8 <presForFrequency+0x24>
	return ((TIM_FREQ/(1000*frequency))-1);  // 1 is added in the register
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <presForFrequency+0x30>)
 80010c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c6:	3b01      	subs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	0501bd00 	.word	0x0501bd00

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <Error_Handler+0x8>

080010e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001182:	2304      	movs	r3, #4
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_I2C_MspInit+0x8c>)
 800118e:	f000 fbc9 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <HAL_TIM_Base_MspInit+0x70>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10e      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a16      	ldr	r2, [pc, #88]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011f2:	e01a      	b.n	800122a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_TIM_Base_MspInit+0x78>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d115      	bne.n	800122a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a0c      	ldr	r2, [pc, #48]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_TIM_Base_MspInit+0x74>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	201d      	movs	r0, #29
 8001220:	f000 fb49 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001224:	201d      	movs	r0, #29
 8001226:	f000 fb62 	bl	80018ee <HAL_NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40010000 	.word	0x40010000
 8001238:	40023800 	.word	0x40023800
 800123c:	40000400 	.word	0x40000400

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_TIM_MspPostInit+0x68>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11e      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800127e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_TIM_MspPostInit+0x70>)
 800129c:	f000 fb42 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12b      	bne.n	800132e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <HAL_UART_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <HAL_UART_MspInit+0x8c>)
 800132a:	f000 fafb 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <NMI_Handler+0x4>

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <MemManage_Handler+0x4>

0800135c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <UsageFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f000 f96d 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <TIM3_IRQHandler+0x10>)
 80013aa:	f001 ffdf 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000120 	.word	0x20000120

080013b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013c0:	f000 fc66 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013c8:	f000 fc62 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_kill>:

int _kill(int pid, int sig)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ea:	f003 fadf 	bl	80049ac <__errno>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2216      	movs	r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
  return -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_exit>:

void _exit (int status)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffe7 	bl	80013e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001412:	bf00      	nop
 8001414:	e7fd      	b.n	8001412 <_exit+0x12>

08001416 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e00a      	b.n	800143e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001428:	f3af 8000 	nop.w
 800142c:	4601      	mov	r1, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	60ba      	str	r2, [r7, #8]
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbf0      	blt.n	8001428 <_read+0x12>
  }

  return len;
 8001446:	687b      	ldr	r3, [r7, #4]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e009      	b.n	8001476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf1      	blt.n	8001462 <_write+0x12>
  }
  return len;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_close>:

int _close(int file)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b0:	605a      	str	r2, [r3, #4]
  return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_isatty>:

int _isatty(int file)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 fa44 	bl	80049ac <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20018000 	.word	0x20018000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000218 	.word	0x20000218
 8001558:	20000370 	.word	0x20000370

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001584:	f7ff ffea 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f003 fa03 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f9b7 	bl	8000924 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c4:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 80015c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015cc:	2000036c 	.word	0x2000036c

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f94f 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fd6c 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f967 	bl	800190a <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f92f 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	2000021c 	.word	0x2000021c

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000021c 	.word	0x2000021c

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	@ (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff3e 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff8e 	bl	80017f4 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff31 	bl	8001764 <__NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffa2 	bl	800185c <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e159      	b.n	8001bf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8148 	bne.w	8001bee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a2 	beq.w	8001bee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <HAL_GPIO_Init+0x2e8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	@ (8001c14 <HAL_GPIO_Init+0x2f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x202>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_GPIO_Init+0x2f4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x1fe>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a47      	ldr	r2, [pc, #284]	@ (8001c1c <HAL_GPIO_Init+0x2f8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x1fa>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_GPIO_Init+0x2fc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x1f6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <HAL_GPIO_Init+0x300>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x1f2>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b16:	2307      	movs	r3, #7
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x204>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	@ (8001c10 <HAL_GPIO_Init+0x2ec>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <HAL_GPIO_Init+0x304>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f aea2 	bls.w	8001940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f996 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e12b      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fa24 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	@ 0x24
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d24:	f001 f8da 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a81      	ldr	r2, [pc, #516]	@ (8001f34 <HAL_I2C_Init+0x274>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d807      	bhi.n	8001d44 <HAL_I2C_Init+0x84>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a80      	ldr	r2, [pc, #512]	@ (8001f38 <HAL_I2C_Init+0x278>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e006      	b.n	8001d52 <HAL_I2C_Init+0x92>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	@ (8001f3c <HAL_I2C_Init+0x27c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0e7      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a78      	ldr	r2, [pc, #480]	@ (8001f40 <HAL_I2C_Init+0x280>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <HAL_I2C_Init+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d802      	bhi.n	8001d94 <HAL_I2C_Init+0xd4>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	e009      	b.n	8001da8 <HAL_I2C_Init+0xe8>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4a69      	ldr	r2, [pc, #420]	@ (8001f44 <HAL_I2C_Init+0x284>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	495c      	ldr	r1, [pc, #368]	@ (8001f34 <HAL_I2C_Init+0x274>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d819      	bhi.n	8001dfc <HAL_I2C_Init+0x13c>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ddc:	400b      	ands	r3, r1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_I2C_Init+0x138>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e59      	subs	r1, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	e051      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e04f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d111      	bne.n	8001e28 <HAL_I2C_Init+0x168>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e012      	b.n	8001e4e <HAL_I2C_Init+0x18e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e58      	subs	r0, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	0099      	lsls	r1, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Init+0x196>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e022      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10e      	bne.n	8001e7c <HAL_I2C_Init+0x1bc>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e58      	subs	r0, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e7a:	e00f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6911      	ldr	r1, [r2, #16]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	000186a0 	.word	0x000186a0
 8001f38:	001e847f 	.word	0x001e847f
 8001f3c:	003d08ff 	.word	0x003d08ff
 8001f40:	431bde83 	.word	0x431bde83
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	460b      	mov	r3, r1
 8001f56:	817b      	strh	r3, [r7, #10]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fba0 	bl	80016a0 <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	f040 80e0 	bne.w	8002130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2319      	movs	r3, #25
 8001f76:	2201      	movs	r2, #1
 8001f78:	4970      	ldr	r1, [pc, #448]	@ (800213c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f964 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	e0d3      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x50>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0cc      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d007      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2221      	movs	r2, #33	@ 0x21
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a50      	ldr	r2, [pc, #320]	@ (8002140 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6a3a      	ldr	r2, [r7, #32]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f89c 	bl	8002144 <I2C_MasterRequestWrite>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08d      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800202c:	e066      	b.n	80020fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fa22 	bl	800247c <I2C_WaitOnTXEFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2b04      	cmp	r3, #4
 8002044:	d107      	bne.n	8002056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11b      	bne.n	80020d0 <HAL_I2C_Master_Transmit+0x188>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	6a39      	ldr	r1, [r7, #32]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fa19 	bl	800250c <I2C_WaitOnBTFFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d107      	bne.n	80020f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01a      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d194      	bne.n	800202e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	00100002 	.word	0x00100002
 8002140:	ffff0000 	.word	0xffff0000

08002144 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d006      	beq.n	800216e <I2C_MasterRequestWrite+0x2a>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d003      	beq.n	800216e <I2C_MasterRequestWrite+0x2a>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800216c:	d108      	bne.n	8002180 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e00b      	b.n	8002198 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	2b12      	cmp	r3, #18
 8002186:	d107      	bne.n	8002198 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002196:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f84f 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021be:	d103      	bne.n	80021c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e035      	b.n	8002238 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021d4:	d108      	bne.n	80021e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	e01b      	b.n	8002220 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 030f 	orn	r3, r3, #15
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	490e      	ldr	r1, [pc, #56]	@ (8002240 <I2C_MasterRequestWrite+0xfc>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f898 	bl	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e010      	b.n	8002238 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4907      	ldr	r1, [pc, #28]	@ (8002244 <I2C_MasterRequestWrite+0x100>)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f888 	bl	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	00010008 	.word	0x00010008
 8002244:	00010002 	.word	0x00010002

08002248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	e048      	b.n	80022ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d044      	beq.n	80022ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff fa1d 	bl	80016a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d139      	bne.n	80022ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10d      	bne.n	800229e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	43da      	mvns	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	e00c      	b.n	80022b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d116      	bne.n	80022ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e023      	b.n	8002334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10d      	bne.n	8002312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	e00c      	b.n	800232c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	43da      	mvns	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4013      	ands	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	429a      	cmp	r2, r3
 8002330:	d093      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234a:	e071      	b.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235a:	d123      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0204 	orr.w	r2, r3, #4
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e067      	b.n	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d041      	beq.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ac:	f7ff f978 	bl	80016a0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d302      	bcc.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d136      	bne.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10c      	bne.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e00b      	b.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e021      	b.n	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10c      	bne.n	8002454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	43da      	mvns	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e00b      	b.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f af6d 	bne.w	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	e034      	b.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f886 	bl	800259c <I2C_IsAcknowledgeFailed>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e034      	b.n	8002504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d028      	beq.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff f8fd 	bl	80016a0 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11d      	bne.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b80      	cmp	r3, #128	@ 0x80
 80024c4:	d016      	beq.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b80      	cmp	r3, #128	@ 0x80
 8002500:	d1c3      	bne.n	800248a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002518:	e034      	b.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f83e 	bl	800259c <I2C_IsAcknowledgeFailed>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e034      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d028      	beq.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7ff f8b5 	bl	80016a0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11d      	bne.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	d016      	beq.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d1c3      	bne.n	800251a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b2:	d11b      	bne.n	80025ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f043 0204 	orr.w	r2, r3, #4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e267      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d075      	beq.n	8002706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800261a:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00c      	beq.n	8002640 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b85      	ldr	r3, [pc, #532]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800262e:	2b08      	cmp	r3, #8
 8002630:	d112      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b82      	ldr	r3, [pc, #520]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263e:	d10b      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4b7e      	ldr	r3, [pc, #504]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05b      	beq.n	8002704 <HAL_RCC_OscConfig+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d157      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e242      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x74>
 8002662:	4b76      	ldr	r3, [pc, #472]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a75      	ldr	r2, [pc, #468]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x98>
 800267a:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6f      	ldr	r2, [pc, #444]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6d      	ldr	r3, [pc, #436]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6c      	ldr	r2, [pc, #432]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002694:	4b69      	ldr	r3, [pc, #420]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b66      	ldr	r3, [pc, #408]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a65      	ldr	r2, [pc, #404]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fff4 	bl	80016a0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fff0 	bl	80016a0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e207      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe ffe0 	bl	80016a0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe ffdc 	bl	80016a0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1f3      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b51      	ldr	r3, [pc, #324]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0xe8>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002712:	4b4a      	ldr	r3, [pc, #296]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b41      	ldr	r3, [pc, #260]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1c7      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4937      	ldr	r1, [pc, #220]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b34      	ldr	r3, [pc, #208]	@ (8002840 <HAL_RCC_OscConfig+0x244>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe ff95 	bl	80016a0 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe ff91 	bl	80016a0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1a8      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b28      	ldr	r3, [pc, #160]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4925      	ldr	r1, [pc, #148]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_RCC_OscConfig+0x244>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff74 	bl	80016a0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe ff70 	bl	80016a0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e187      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d036      	beq.n	8002854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_RCC_OscConfig+0x248>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe ff54 	bl	80016a0 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe ff50 	bl	80016a0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e167      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x240>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x200>
 800281a:	e01b      	b.n	8002854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_OscConfig+0x248>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe ff3d 	bl	80016a0 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	e00e      	b.n	8002848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe ff39 	bl	80016a0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d907      	bls.n	8002848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e150      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
 800283c:	40023800 	.word	0x40023800
 8002840:	42470000 	.word	0x42470000
 8002844:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ea      	bne.n	800282a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8097 	beq.w	8002990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b81      	ldr	r3, [pc, #516]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b7d      	ldr	r3, [pc, #500]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	@ 0x40
 8002882:	4b7a      	ldr	r3, [pc, #488]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b77      	ldr	r3, [pc, #476]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	4b74      	ldr	r3, [pc, #464]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a73      	ldr	r2, [pc, #460]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fef9 	bl	80016a0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fe fef5 	bl	80016a0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e10c      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_OscConfig+0x474>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2ea>
 80028d8:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4a63      	ldr	r2, [pc, #396]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e4:	e01c      	b.n	8002920 <HAL_RCC_OscConfig+0x324>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028ee:	4b5f      	ldr	r3, [pc, #380]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	@ 0x70
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0x324>
 8002908:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
 8002914:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a54      	ldr	r2, [pc, #336]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0304 	bic.w	r3, r3, #4
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe feba 	bl	80016a0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe feb6 	bl	80016a0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0cb      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002946:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ee      	beq.n	8002930 <HAL_RCC_OscConfig+0x334>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7fe fea4 	bl	80016a0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fea0 	bl	80016a0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0b5      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ee      	bne.n	800295c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002984:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a1 	beq.w	8002adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299a:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d05c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d141      	bne.n	8002a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fe74 	bl	80016a0 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fe70 	bl	80016a0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e087      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	491b      	ldr	r1, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fe49 	bl	80016a0 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fe45 	bl	80016a0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e05c      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x416>
 8002a30:	e054      	b.n	8002adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe32 	bl	80016a0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fe2e 	bl	80016a0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e045      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x444>
 8002a5e:	e03d      	b.n	8002adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e038      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d028      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d11a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b68      	ldr	r3, [pc, #416]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90c      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d044      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e067      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4934      	ldr	r1, [pc, #208]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fd60 	bl	80016a0 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe fd5c 	bl	80016a0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20c      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	@ (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fcc0 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	08005a30 	.word	0x08005a30
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b094      	sub	sp, #80	@ 0x50
 8002cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd0:	4b79      	ldr	r3, [pc, #484]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	f200 80e1 	bhi.w	8002ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cea:	e0db      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b73      	ldr	r3, [pc, #460]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf0:	e0db      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf6:	e0d8      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	2200      	movs	r2, #0
 8002d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	f04f 0000 	mov.w	r0, #0
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	0159      	lsls	r1, r3, #5
 8002d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3c:	0150      	lsls	r0, r2, #5
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4621      	mov	r1, r4
 8002d44:	1a51      	subs	r1, r2, r1
 8002d46:	6139      	str	r1, [r7, #16]
 8002d48:	4629      	mov	r1, r5
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	018b      	lsls	r3, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d66:	4651      	mov	r1, sl
 8002d68:	018a      	lsls	r2, r1, #6
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d70:	4659      	mov	r1, fp
 8002d72:	eb63 0901 	sbc.w	r9, r3, r1
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8a:	4690      	mov	r8, r2
 8002d8c:	4699      	mov	r9, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	eb18 0303 	adds.w	r3, r8, r3
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	462b      	mov	r3, r5
 8002d98:	eb49 0303 	adc.w	r3, r9, r3
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002daa:	4629      	mov	r1, r5
 8002dac:	024b      	lsls	r3, r1, #9
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db4:	4621      	mov	r1, r4
 8002db6:	024a      	lsls	r2, r1, #9
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc8:	f7fd fa5a 	bl	8000280 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e058      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	4611      	mov	r1, r2
 8002de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	f04f 0000 	mov.w	r0, #0
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	0159      	lsls	r1, r3, #5
 8002dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e02:	0150      	lsls	r0, r2, #5
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e28:	ebb2 040a 	subs.w	r4, r2, sl
 8002e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	00eb      	lsls	r3, r5, #3
 8002e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3e:	00e2      	lsls	r2, r4, #3
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	4643      	mov	r3, r8
 8002e46:	18e3      	adds	r3, r4, r3
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	eb45 0303 	adc.w	r3, r5, r3
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	61fa      	str	r2, [r7, #28]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	f7fd fa00 	bl	8000280 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3750      	adds	r7, #80	@ 0x50
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	@ (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08005a40 	.word	0x08005a40

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f08:	f7ff ffdc 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	0b5b      	lsrs	r3, r3, #13
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4903      	ldr	r1, [pc, #12]	@ (8002f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1a:	5ccb      	ldrb	r3, [r1, r3]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08005a40 	.word	0x08005a40

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f936 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 fca0 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e044      	b.n	800306e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <HAL_TIM_Base_Start_IT+0xb0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300e:	d013      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <HAL_TIM_Base_Start_IT+0xb4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <HAL_TIM_Base_Start_IT+0xb8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <HAL_TIM_Base_Start_IT+0xbc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x6c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_TIM_Base_Start_IT+0xc0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b06      	cmp	r3, #6
 8003048:	d010      	beq.n	800306c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	e007      	b.n	800306c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40014000 	.word	0x40014000

08003090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f839 	bl	800312e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 fbee 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start+0x24>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start+0x3e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x58>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e068      	b.n	8003288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fe0c 	bl	8003e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d013      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_PWM_Start+0x150>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_PWM_Start+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <HAL_TIM_PWM_Start+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d010      	beq.n	8003286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e007      	b.n	8003286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fdac 	bl	8003e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_TIM_PWM_Stop+0xc4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d117      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_TIM_PWM_Stop+0x82>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_TIM_PWM_Stop+0x82>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Stop+0x92>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003334:	e013      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Stop+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003344:	e00b      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Stop+0xb2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003354:	e003      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40010000 	.word	0x40010000

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0202 	mvn.w	r2, #2
 80033a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa5b 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa4d 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa5e 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa35 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa27 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa38 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d020      	beq.n	8003468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0208 	mvn.w	r2, #8
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa0f 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa01 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa12 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d020      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9e9 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9db 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9ec 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0201 	mvn.w	r2, #1
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fd48 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd7c 	bl	8003ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9bd 	bl	800389a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0220 	mvn.w	r2, #32
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fd4e 	bl	8003fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e0ae      	b.n	80036c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f200 809f 	bhi.w	80036b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080036b9 	.word	0x080036b9
 8003588:	080036b9 	.word	0x080036b9
 800358c:	080036b9 	.word	0x080036b9
 8003590:	080035f5 	.word	0x080035f5
 8003594:	080036b9 	.word	0x080036b9
 8003598:	080036b9 	.word	0x080036b9
 800359c:	080036b9 	.word	0x080036b9
 80035a0:	08003637 	.word	0x08003637
 80035a4:	080036b9 	.word	0x080036b9
 80035a8:	080036b9 	.word	0x080036b9
 80035ac:	080036b9 	.word	0x080036b9
 80035b0:	08003677 	.word	0x08003677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa04 	bl	80039c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e064      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa4a 	bl	8003a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e043      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa95 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e023      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fadf 	bl	8003c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e002      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_ConfigClockSource+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0b4      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x172>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b70      	cmp	r3, #112	@ 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xa6>
 8003740:	2b70      	cmp	r3, #112	@ 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b60      	cmp	r3, #96	@ 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x11a>
 8003748:	2b60      	cmp	r3, #96	@ 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b50      	cmp	r3, #80	@ 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfa>
 8003750:	2b50      	cmp	r3, #80	@ 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x13a>
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b30      	cmp	r3, #48	@ 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	f000 fb25 	bl	8003dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	f000 fb0e 	bl	8003dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fa82 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	@ 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fadb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 faa1 	bl	8003d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	@ 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 facb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fa62 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	@ 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fabb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fab2 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3a      	ldr	r2, [pc, #232]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <TIM_Base_SetConfig+0x100>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a36      	ldr	r2, [pc, #216]	@ (80039b4 <TIM_Base_SetConfig+0x104>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <TIM_Base_SetConfig+0x108>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2b      	ldr	r2, [pc, #172]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01b      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d017      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <TIM_Base_SetConfig+0x100>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <TIM_Base_SetConfig+0x104>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <TIM_Base_SetConfig+0x108>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a25      	ldr	r2, [pc, #148]	@ (80039bc <TIM_Base_SetConfig+0x10c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a24      	ldr	r2, [pc, #144]	@ (80039c0 <TIM_Base_SetConfig+0x110>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a23      	ldr	r2, [pc, #140]	@ (80039c4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0e      	ldr	r2, [pc, #56]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]
  }
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800

080039c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0201 	bic.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40010000 	.word	0x40010000

08003a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0210 	bic.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10d      	bne.n	8003b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10d      	bne.n	8003be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40010000 	.word	0x40010000

08003c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	@ (8003cdc <TIM_OC4_SetConfig+0x9c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 0210 	bic.w	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e050      	b.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec4:	d013      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10c      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40014000 	.word	0x40014000

08003f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e03d      	b.n	8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e042      	b.n	80040a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f940 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	@ 0x24
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800404a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f82b 	bl	80040a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b0c0      	sub	sp, #256	@ 0x100
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	ea40 0301 	orr.w	r3, r0, r1
 80040d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004100:	f021 010c 	bic.w	r1, r1, #12
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800410e:	430b      	orrs	r3, r1
 8004110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	6999      	ldr	r1, [r3, #24]
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	ea40 0301 	orr.w	r3, r0, r1
 800412e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8f      	ldr	r3, [pc, #572]	@ (8004374 <UART_SetConfig+0x2cc>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d005      	beq.n	8004148 <UART_SetConfig+0xa0>
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <UART_SetConfig+0x2d0>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d104      	bne.n	8004152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe fedc 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 800414c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004150:	e003      	b.n	800415a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004152:	f7fe fec3 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8004156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004164:	f040 810c 	bne.w	8004380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	1891      	adds	r1, r2, r2
 8004180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004182:	415b      	adcs	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800418a:	4621      	mov	r1, r4
 800418c:	eb12 0801 	adds.w	r8, r2, r1
 8004190:	4629      	mov	r1, r5
 8004192:	eb43 0901 	adc.w	r9, r3, r1
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041aa:	4690      	mov	r8, r2
 80041ac:	4699      	mov	r9, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	eb18 0303 	adds.w	r3, r8, r3
 80041b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b8:	462b      	mov	r3, r5
 80041ba:	eb49 0303 	adc.w	r3, r9, r3
 80041be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041d6:	460b      	mov	r3, r1
 80041d8:	18db      	adds	r3, r3, r3
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
 80041dc:	4613      	mov	r3, r2
 80041de:	eb42 0303 	adc.w	r3, r2, r3
 80041e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041ec:	f7fc f848 	bl	8000280 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4b61      	ldr	r3, [pc, #388]	@ (800437c <UART_SetConfig+0x2d4>)
 80041f6:	fba3 2302 	umull	r2, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	011c      	lsls	r4, r3, #4
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800420c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004218:	415b      	adcs	r3, r3
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004220:	4641      	mov	r1, r8
 8004222:	eb12 0a01 	adds.w	sl, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb43 0b01 	adc.w	fp, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800423c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004240:	4692      	mov	sl, r2
 8004242:	469b      	mov	fp, r3
 8004244:	4643      	mov	r3, r8
 8004246:	eb1a 0303 	adds.w	r3, sl, r3
 800424a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424e:	464b      	mov	r3, r9
 8004250:	eb4b 0303 	adc.w	r3, fp, r3
 8004254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	643b      	str	r3, [r7, #64]	@ 0x40
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004282:	f7fb fffd 	bl	8000280 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4611      	mov	r1, r2
 800428c:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <UART_SetConfig+0x2d4>)
 800428e:	fba3 2301 	umull	r2, r3, r3, r1
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2264      	movs	r2, #100	@ 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042a2:	4b36      	ldr	r3, [pc, #216]	@ (800437c <UART_SetConfig+0x2d4>)
 80042a4:	fba3 2302 	umull	r2, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b0:	441c      	add	r4, r3
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042cc:	415b      	adcs	r3, r3
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d4:	4641      	mov	r1, r8
 80042d6:	1851      	adds	r1, r2, r1
 80042d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042da:	4649      	mov	r1, r9
 80042dc:	414b      	adcs	r3, r1
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042ec:	4659      	mov	r1, fp
 80042ee:	00cb      	lsls	r3, r1, #3
 80042f0:	4651      	mov	r1, sl
 80042f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f6:	4651      	mov	r1, sl
 80042f8:	00ca      	lsls	r2, r1, #3
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	4642      	mov	r2, r8
 8004302:	189b      	adds	r3, r3, r2
 8004304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004308:	464b      	mov	r3, r9
 800430a:	460a      	mov	r2, r1
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004328:	460b      	mov	r3, r1
 800432a:	18db      	adds	r3, r3, r3
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432e:	4613      	mov	r3, r2
 8004330:	eb42 0303 	adc.w	r3, r2, r3
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800433a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800433e:	f7fb ff9f 	bl	8000280 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <UART_SetConfig+0x2d4>)
 8004348:	fba3 1302 	umull	r1, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	2164      	movs	r1, #100	@ 0x64
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	3332      	adds	r3, #50	@ 0x32
 800435a:	4a08      	ldr	r2, [pc, #32]	@ (800437c <UART_SetConfig+0x2d4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f003 0207 	and.w	r2, r3, #7
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4422      	add	r2, r4
 800436e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004370:	e106      	b.n	8004580 <UART_SetConfig+0x4d8>
 8004372:	bf00      	nop
 8004374:	40011000 	.word	0x40011000
 8004378:	40011400 	.word	0x40011400
 800437c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800438a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800438e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004392:	4642      	mov	r2, r8
 8004394:	464b      	mov	r3, r9
 8004396:	1891      	adds	r1, r2, r2
 8004398:	6239      	str	r1, [r7, #32]
 800439a:	415b      	adcs	r3, r3
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a2:	4641      	mov	r1, r8
 80043a4:	1854      	adds	r4, r2, r1
 80043a6:	4649      	mov	r1, r9
 80043a8:	eb43 0501 	adc.w	r5, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	00eb      	lsls	r3, r5, #3
 80043b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ba:	00e2      	lsls	r2, r4, #3
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	4643      	mov	r3, r8
 80043c2:	18e3      	adds	r3, r4, r3
 80043c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c8:	464b      	mov	r3, r9
 80043ca:	eb45 0303 	adc.w	r3, r5, r3
 80043ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ee:	4629      	mov	r1, r5
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	4621      	mov	r1, r4
 80043f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f8:	4621      	mov	r1, r4
 80043fa:	008a      	lsls	r2, r1, #2
 80043fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004400:	f7fb ff3e 	bl	8000280 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b60      	ldr	r3, [pc, #384]	@ (800458c <UART_SetConfig+0x4e4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800441c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	61b9      	str	r1, [r7, #24]
 800442c:	415b      	adcs	r3, r3
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	4641      	mov	r1, r8
 8004436:	1851      	adds	r1, r2, r1
 8004438:	6139      	str	r1, [r7, #16]
 800443a:	4649      	mov	r1, r9
 800443c:	414b      	adcs	r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	00cb      	lsls	r3, r1, #3
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004456:	4651      	mov	r1, sl
 8004458:	00ca      	lsls	r2, r1, #3
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	4603      	mov	r3, r0
 8004460:	4642      	mov	r2, r8
 8004462:	189b      	adds	r3, r3, r2
 8004464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004468:	464b      	mov	r3, r9
 800446a:	460a      	mov	r2, r1
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800448c:	4649      	mov	r1, r9
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	4641      	mov	r1, r8
 8004492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004496:	4641      	mov	r1, r8
 8004498:	008a      	lsls	r2, r1, #2
 800449a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800449e:	f7fb feef 	bl	8000280 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <UART_SetConfig+0x4e4>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2264      	movs	r2, #100	@ 0x64
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	@ 0x32
 80044bc:	4a33      	ldr	r2, [pc, #204]	@ (800458c <UART_SetConfig+0x4e4>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	441c      	add	r4, r3
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	464b      	mov	r3, r9
 800451c:	460a      	mov	r2, r1
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	663b      	str	r3, [r7, #96]	@ 0x60
 800452e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800453c:	4649      	mov	r1, r9
 800453e:	008b      	lsls	r3, r1, #2
 8004540:	4641      	mov	r1, r8
 8004542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004546:	4641      	mov	r1, r8
 8004548:	008a      	lsls	r2, r1, #2
 800454a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800454e:	f7fb fe97 	bl	8000280 <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <UART_SetConfig+0x4e4>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	2164      	movs	r1, #100	@ 0x64
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	3332      	adds	r3, #50	@ 0x32
 800456a:	4a08      	ldr	r2, [pc, #32]	@ (800458c <UART_SetConfig+0x4e4>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4422      	add	r2, r4
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458c:	51eb851f 	.word	0x51eb851f

08004590 <srand>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <srand+0x44>)
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004598:	4604      	mov	r4, r0
 800459a:	b9b3      	cbnz	r3, 80045ca <srand+0x3a>
 800459c:	2018      	movs	r0, #24
 800459e:	f000 fa9b 	bl	8004ad8 <malloc>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6328      	str	r0, [r5, #48]	@ 0x30
 80045a6:	b920      	cbnz	r0, 80045b2 <srand+0x22>
 80045a8:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <srand+0x48>)
 80045aa:	480c      	ldr	r0, [pc, #48]	@ (80045dc <srand+0x4c>)
 80045ac:	2146      	movs	r1, #70	@ 0x46
 80045ae:	f000 fa2b 	bl	8004a08 <__assert_func>
 80045b2:	490b      	ldr	r1, [pc, #44]	@ (80045e0 <srand+0x50>)
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <srand+0x54>)
 80045b6:	e9c0 1300 	strd	r1, r3, [r0]
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <srand+0x58>)
 80045bc:	6083      	str	r3, [r0, #8]
 80045be:	230b      	movs	r3, #11
 80045c0:	8183      	strh	r3, [r0, #12]
 80045c2:	2100      	movs	r1, #0
 80045c4:	2001      	movs	r0, #1
 80045c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80045ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045cc:	2200      	movs	r2, #0
 80045ce:	611c      	str	r4, [r3, #16]
 80045d0:	615a      	str	r2, [r3, #20]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	20000018 	.word	0x20000018
 80045d8:	08005a48 	.word	0x08005a48
 80045dc:	08005a5f 	.word	0x08005a5f
 80045e0:	abcd330e 	.word	0xabcd330e
 80045e4:	e66d1234 	.word	0xe66d1234
 80045e8:	0005deec 	.word	0x0005deec

080045ec <rand>:
 80045ec:	4b16      	ldr	r3, [pc, #88]	@ (8004648 <rand+0x5c>)
 80045ee:	b510      	push	{r4, lr}
 80045f0:	681c      	ldr	r4, [r3, #0]
 80045f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80045f4:	b9b3      	cbnz	r3, 8004624 <rand+0x38>
 80045f6:	2018      	movs	r0, #24
 80045f8:	f000 fa6e 	bl	8004ad8 <malloc>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004600:	b920      	cbnz	r0, 800460c <rand+0x20>
 8004602:	4b12      	ldr	r3, [pc, #72]	@ (800464c <rand+0x60>)
 8004604:	4812      	ldr	r0, [pc, #72]	@ (8004650 <rand+0x64>)
 8004606:	2152      	movs	r1, #82	@ 0x52
 8004608:	f000 f9fe 	bl	8004a08 <__assert_func>
 800460c:	4911      	ldr	r1, [pc, #68]	@ (8004654 <rand+0x68>)
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <rand+0x6c>)
 8004610:	e9c0 1300 	strd	r1, r3, [r0]
 8004614:	4b11      	ldr	r3, [pc, #68]	@ (800465c <rand+0x70>)
 8004616:	6083      	str	r3, [r0, #8]
 8004618:	230b      	movs	r3, #11
 800461a:	8183      	strh	r3, [r0, #12]
 800461c:	2100      	movs	r1, #0
 800461e:	2001      	movs	r0, #1
 8004620:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004624:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004626:	480e      	ldr	r0, [pc, #56]	@ (8004660 <rand+0x74>)
 8004628:	690b      	ldr	r3, [r1, #16]
 800462a:	694c      	ldr	r4, [r1, #20]
 800462c:	4a0d      	ldr	r2, [pc, #52]	@ (8004664 <rand+0x78>)
 800462e:	4358      	muls	r0, r3
 8004630:	fb02 0004 	mla	r0, r2, r4, r0
 8004634:	fba3 3202 	umull	r3, r2, r3, r2
 8004638:	3301      	adds	r3, #1
 800463a:	eb40 0002 	adc.w	r0, r0, r2
 800463e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004642:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004646:	bd10      	pop	{r4, pc}
 8004648:	20000018 	.word	0x20000018
 800464c:	08005a48 	.word	0x08005a48
 8004650:	08005a5f 	.word	0x08005a5f
 8004654:	abcd330e 	.word	0xabcd330e
 8004658:	e66d1234 	.word	0xe66d1234
 800465c:	0005deec 	.word	0x0005deec
 8004660:	5851f42d 	.word	0x5851f42d
 8004664:	4c957f2d 	.word	0x4c957f2d

08004668 <std>:
 8004668:	2300      	movs	r3, #0
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
 800466e:	e9c0 3300 	strd	r3, r3, [r0]
 8004672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004676:	6083      	str	r3, [r0, #8]
 8004678:	8181      	strh	r1, [r0, #12]
 800467a:	6643      	str	r3, [r0, #100]	@ 0x64
 800467c:	81c2      	strh	r2, [r0, #14]
 800467e:	6183      	str	r3, [r0, #24]
 8004680:	4619      	mov	r1, r3
 8004682:	2208      	movs	r2, #8
 8004684:	305c      	adds	r0, #92	@ 0x5c
 8004686:	f000 f914 	bl	80048b2 <memset>
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <std+0x58>)
 800468c:	6263      	str	r3, [r4, #36]	@ 0x24
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <std+0x5c>)
 8004690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <std+0x60>)
 8004694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <std+0x64>)
 8004698:	6323      	str	r3, [r4, #48]	@ 0x30
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <std+0x68>)
 800469c:	6224      	str	r4, [r4, #32]
 800469e:	429c      	cmp	r4, r3
 80046a0:	d006      	beq.n	80046b0 <std+0x48>
 80046a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046a6:	4294      	cmp	r4, r2
 80046a8:	d002      	beq.n	80046b0 <std+0x48>
 80046aa:	33d0      	adds	r3, #208	@ 0xd0
 80046ac:	429c      	cmp	r4, r3
 80046ae:	d105      	bne.n	80046bc <std+0x54>
 80046b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b8:	f000 b9a2 	b.w	8004a00 <__retarget_lock_init_recursive>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	bf00      	nop
 80046c0:	0800482d 	.word	0x0800482d
 80046c4:	0800484f 	.word	0x0800484f
 80046c8:	08004887 	.word	0x08004887
 80046cc:	080048ab 	.word	0x080048ab
 80046d0:	20000220 	.word	0x20000220

080046d4 <stdio_exit_handler>:
 80046d4:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <stdio_exit_handler+0xc>)
 80046d6:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <stdio_exit_handler+0x10>)
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <stdio_exit_handler+0x14>)
 80046da:	f000 b869 	b.w	80047b0 <_fwalk_sglue>
 80046de:	bf00      	nop
 80046e0:	2000000c 	.word	0x2000000c
 80046e4:	08005319 	.word	0x08005319
 80046e8:	2000001c 	.word	0x2000001c

080046ec <cleanup_stdio>:
 80046ec:	6841      	ldr	r1, [r0, #4]
 80046ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <cleanup_stdio+0x34>)
 80046f0:	4299      	cmp	r1, r3
 80046f2:	b510      	push	{r4, lr}
 80046f4:	4604      	mov	r4, r0
 80046f6:	d001      	beq.n	80046fc <cleanup_stdio+0x10>
 80046f8:	f000 fe0e 	bl	8005318 <_fflush_r>
 80046fc:	68a1      	ldr	r1, [r4, #8]
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <cleanup_stdio+0x38>)
 8004700:	4299      	cmp	r1, r3
 8004702:	d002      	beq.n	800470a <cleanup_stdio+0x1e>
 8004704:	4620      	mov	r0, r4
 8004706:	f000 fe07 	bl	8005318 <_fflush_r>
 800470a:	68e1      	ldr	r1, [r4, #12]
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <cleanup_stdio+0x3c>)
 800470e:	4299      	cmp	r1, r3
 8004710:	d004      	beq.n	800471c <cleanup_stdio+0x30>
 8004712:	4620      	mov	r0, r4
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f000 bdfe 	b.w	8005318 <_fflush_r>
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	20000220 	.word	0x20000220
 8004724:	20000288 	.word	0x20000288
 8004728:	200002f0 	.word	0x200002f0

0800472c <global_stdio_init.part.0>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <global_stdio_init.part.0+0x30>)
 8004730:	4c0b      	ldr	r4, [pc, #44]	@ (8004760 <global_stdio_init.part.0+0x34>)
 8004732:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <global_stdio_init.part.0+0x38>)
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4620      	mov	r0, r4
 8004738:	2200      	movs	r2, #0
 800473a:	2104      	movs	r1, #4
 800473c:	f7ff ff94 	bl	8004668 <std>
 8004740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004744:	2201      	movs	r2, #1
 8004746:	2109      	movs	r1, #9
 8004748:	f7ff ff8e 	bl	8004668 <std>
 800474c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004750:	2202      	movs	r2, #2
 8004752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004756:	2112      	movs	r1, #18
 8004758:	f7ff bf86 	b.w	8004668 <std>
 800475c:	20000358 	.word	0x20000358
 8004760:	20000220 	.word	0x20000220
 8004764:	080046d5 	.word	0x080046d5

08004768 <__sfp_lock_acquire>:
 8004768:	4801      	ldr	r0, [pc, #4]	@ (8004770 <__sfp_lock_acquire+0x8>)
 800476a:	f000 b94a 	b.w	8004a02 <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	20000361 	.word	0x20000361

08004774 <__sfp_lock_release>:
 8004774:	4801      	ldr	r0, [pc, #4]	@ (800477c <__sfp_lock_release+0x8>)
 8004776:	f000 b945 	b.w	8004a04 <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	20000361 	.word	0x20000361

08004780 <__sinit>:
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
 8004784:	f7ff fff0 	bl	8004768 <__sfp_lock_acquire>
 8004788:	6a23      	ldr	r3, [r4, #32]
 800478a:	b11b      	cbz	r3, 8004794 <__sinit+0x14>
 800478c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004790:	f7ff bff0 	b.w	8004774 <__sfp_lock_release>
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <__sinit+0x28>)
 8004796:	6223      	str	r3, [r4, #32]
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <__sinit+0x2c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f5      	bne.n	800478c <__sinit+0xc>
 80047a0:	f7ff ffc4 	bl	800472c <global_stdio_init.part.0>
 80047a4:	e7f2      	b.n	800478c <__sinit+0xc>
 80047a6:	bf00      	nop
 80047a8:	080046ed 	.word	0x080046ed
 80047ac:	20000358 	.word	0x20000358

080047b0 <_fwalk_sglue>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	4607      	mov	r7, r0
 80047b6:	4688      	mov	r8, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	2600      	movs	r6, #0
 80047bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c0:	f1b9 0901 	subs.w	r9, r9, #1
 80047c4:	d505      	bpl.n	80047d2 <_fwalk_sglue+0x22>
 80047c6:	6824      	ldr	r4, [r4, #0]
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d1f7      	bne.n	80047bc <_fwalk_sglue+0xc>
 80047cc:	4630      	mov	r0, r6
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d907      	bls.n	80047e8 <_fwalk_sglue+0x38>
 80047d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047dc:	3301      	adds	r3, #1
 80047de:	d003      	beq.n	80047e8 <_fwalk_sglue+0x38>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4638      	mov	r0, r7
 80047e4:	47c0      	blx	r8
 80047e6:	4306      	orrs	r6, r0
 80047e8:	3568      	adds	r5, #104	@ 0x68
 80047ea:	e7e9      	b.n	80047c0 <_fwalk_sglue+0x10>

080047ec <siprintf>:
 80047ec:	b40e      	push	{r1, r2, r3}
 80047ee:	b500      	push	{lr}
 80047f0:	b09c      	sub	sp, #112	@ 0x70
 80047f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	9006      	str	r0, [sp, #24]
 80047f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047fc:	4809      	ldr	r0, [pc, #36]	@ (8004824 <siprintf+0x38>)
 80047fe:	9107      	str	r1, [sp, #28]
 8004800:	9104      	str	r1, [sp, #16]
 8004802:	4909      	ldr	r1, [pc, #36]	@ (8004828 <siprintf+0x3c>)
 8004804:	f853 2b04 	ldr.w	r2, [r3], #4
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	a902      	add	r1, sp, #8
 8004810:	f000 fa74 	bl	8004cfc <_svfiprintf_r>
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	b01c      	add	sp, #112	@ 0x70
 800481c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004820:	b003      	add	sp, #12
 8004822:	4770      	bx	lr
 8004824:	20000018 	.word	0x20000018
 8004828:	ffff0208 	.word	0xffff0208

0800482c <__sread>:
 800482c:	b510      	push	{r4, lr}
 800482e:	460c      	mov	r4, r1
 8004830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004834:	f000 f896 	bl	8004964 <_read_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	bfab      	itete	ge
 800483c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800483e:	89a3      	ldrhlt	r3, [r4, #12]
 8004840:	181b      	addge	r3, r3, r0
 8004842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004846:	bfac      	ite	ge
 8004848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800484a:	81a3      	strhlt	r3, [r4, #12]
 800484c:	bd10      	pop	{r4, pc}

0800484e <__swrite>:
 800484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	461f      	mov	r7, r3
 8004854:	898b      	ldrh	r3, [r1, #12]
 8004856:	05db      	lsls	r3, r3, #23
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4616      	mov	r6, r2
 800485e:	d505      	bpl.n	800486c <__swrite+0x1e>
 8004860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004864:	2302      	movs	r3, #2
 8004866:	2200      	movs	r2, #0
 8004868:	f000 f86a 	bl	8004940 <_lseek_r>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	4632      	mov	r2, r6
 800487a:	463b      	mov	r3, r7
 800487c:	4628      	mov	r0, r5
 800487e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004882:	f000 b881 	b.w	8004988 <_write_r>

08004886 <__sseek>:
 8004886:	b510      	push	{r4, lr}
 8004888:	460c      	mov	r4, r1
 800488a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488e:	f000 f857 	bl	8004940 <_lseek_r>
 8004892:	1c43      	adds	r3, r0, #1
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	bf15      	itete	ne
 8004898:	6560      	strne	r0, [r4, #84]	@ 0x54
 800489a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800489e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048a2:	81a3      	strheq	r3, [r4, #12]
 80048a4:	bf18      	it	ne
 80048a6:	81a3      	strhne	r3, [r4, #12]
 80048a8:	bd10      	pop	{r4, pc}

080048aa <__sclose>:
 80048aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ae:	f000 b825 	b.w	80048fc <_close_r>

080048b2 <memset>:
 80048b2:	4402      	add	r2, r0
 80048b4:	4603      	mov	r3, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d100      	bne.n	80048bc <memset+0xa>
 80048ba:	4770      	bx	lr
 80048bc:	f803 1b01 	strb.w	r1, [r3], #1
 80048c0:	e7f9      	b.n	80048b6 <memset+0x4>
	...

080048c4 <time>:
 80048c4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80048c6:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <time+0x34>)
 80048c8:	f04f 36ff 	mov.w	r6, #4294967295
 80048cc:	f04f 37ff 	mov.w	r7, #4294967295
 80048d0:	4669      	mov	r1, sp
 80048d2:	4604      	mov	r4, r0
 80048d4:	2200      	movs	r2, #0
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	e9cd 6700 	strd	r6, r7, [sp]
 80048dc:	f000 f81e 	bl	800491c <_gettimeofday_r>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	bfb8      	it	lt
 80048e4:	e9cd 6700 	strdlt	r6, r7, [sp]
 80048e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ec:	b10c      	cbz	r4, 80048f2 <time+0x2e>
 80048ee:	e9c4 0100 	strd	r0, r1, [r4]
 80048f2:	b004      	add	sp, #16
 80048f4:	bdd0      	pop	{r4, r6, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000018 	.word	0x20000018

080048fc <_close_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d06      	ldr	r5, [pc, #24]	@ (8004918 <_close_r+0x1c>)
 8004900:	2300      	movs	r3, #0
 8004902:	4604      	mov	r4, r0
 8004904:	4608      	mov	r0, r1
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f7fc fdbe 	bl	8001488 <_close>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_close_r+0x1a>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_close_r+0x1a>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	2000035c 	.word	0x2000035c

0800491c <_gettimeofday_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d07      	ldr	r5, [pc, #28]	@ (800493c <_gettimeofday_r+0x20>)
 8004920:	2300      	movs	r3, #0
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	f001 f841 	bl	80059b0 <_gettimeofday>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d102      	bne.n	8004938 <_gettimeofday_r+0x1c>
 8004932:	682b      	ldr	r3, [r5, #0]
 8004934:	b103      	cbz	r3, 8004938 <_gettimeofday_r+0x1c>
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	bd38      	pop	{r3, r4, r5, pc}
 800493a:	bf00      	nop
 800493c:	2000035c 	.word	0x2000035c

08004940 <_lseek_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d07      	ldr	r5, [pc, #28]	@ (8004960 <_lseek_r+0x20>)
 8004944:	4604      	mov	r4, r0
 8004946:	4608      	mov	r0, r1
 8004948:	4611      	mov	r1, r2
 800494a:	2200      	movs	r2, #0
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f7fc fdc1 	bl	80014d6 <_lseek>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_lseek_r+0x1e>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_lseek_r+0x1e>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	2000035c 	.word	0x2000035c

08004964 <_read_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4d07      	ldr	r5, [pc, #28]	@ (8004984 <_read_r+0x20>)
 8004968:	4604      	mov	r4, r0
 800496a:	4608      	mov	r0, r1
 800496c:	4611      	mov	r1, r2
 800496e:	2200      	movs	r2, #0
 8004970:	602a      	str	r2, [r5, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f7fc fd4f 	bl	8001416 <_read>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_read_r+0x1e>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_read_r+0x1e>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	2000035c 	.word	0x2000035c

08004988 <_write_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d07      	ldr	r5, [pc, #28]	@ (80049a8 <_write_r+0x20>)
 800498c:	4604      	mov	r4, r0
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	2200      	movs	r2, #0
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f7fc fd5a 	bl	8001450 <_write>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_write_r+0x1e>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_write_r+0x1e>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	2000035c 	.word	0x2000035c

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	@ (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000018 	.word	0x20000018

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	@ (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	@ (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	@ (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	@ (80049fc <__libc_init_array+0x44>)
 80049cc:	f000 fff8 	bl	80059c0 <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	08005b30 	.word	0x08005b30
 80049f4:	08005b30 	.word	0x08005b30
 80049f8:	08005b30 	.word	0x08005b30
 80049fc:	08005b34 	.word	0x08005b34

08004a00 <__retarget_lock_init_recursive>:
 8004a00:	4770      	bx	lr

08004a02 <__retarget_lock_acquire_recursive>:
 8004a02:	4770      	bx	lr

08004a04 <__retarget_lock_release_recursive>:
 8004a04:	4770      	bx	lr
	...

08004a08 <__assert_func>:
 8004a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <__assert_func+0x2c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4605      	mov	r5, r0
 8004a14:	68d8      	ldr	r0, [r3, #12]
 8004a16:	b954      	cbnz	r4, 8004a2e <__assert_func+0x26>
 8004a18:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <__assert_func+0x30>)
 8004a1a:	461c      	mov	r4, r3
 8004a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a20:	9100      	str	r1, [sp, #0]
 8004a22:	462b      	mov	r3, r5
 8004a24:	4905      	ldr	r1, [pc, #20]	@ (8004a3c <__assert_func+0x34>)
 8004a26:	f000 fc9f 	bl	8005368 <fiprintf>
 8004a2a:	f000 fce7 	bl	80053fc <abort>
 8004a2e:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <__assert_func+0x38>)
 8004a30:	e7f4      	b.n	8004a1c <__assert_func+0x14>
 8004a32:	bf00      	nop
 8004a34:	20000018 	.word	0x20000018
 8004a38:	08005af2 	.word	0x08005af2
 8004a3c:	08005ac4 	.word	0x08005ac4
 8004a40:	08005ab7 	.word	0x08005ab7

08004a44 <_free_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d041      	beq.n	8004ad0 <_free_r+0x8c>
 8004a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a50:	1f0c      	subs	r4, r1, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfb8      	it	lt
 8004a56:	18e4      	addlt	r4, r4, r3
 8004a58:	f000 f8e8 	bl	8004c2c <__malloc_lock>
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <_free_r+0x90>)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	b933      	cbnz	r3, 8004a70 <_free_r+0x2c>
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6c:	f000 b8e4 	b.w	8004c38 <__malloc_unlock>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d908      	bls.n	8004a86 <_free_r+0x42>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	1821      	adds	r1, r4, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	e7ed      	b.n	8004a62 <_free_r+0x1e>
 8004a86:	461a      	mov	r2, r3
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b10b      	cbz	r3, 8004a90 <_free_r+0x4c>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d9fa      	bls.n	8004a86 <_free_r+0x42>
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	1850      	adds	r0, r2, r1
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d10b      	bne.n	8004ab0 <_free_r+0x6c>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	1850      	adds	r0, r2, r1
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	d1e0      	bne.n	8004a66 <_free_r+0x22>
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	6053      	str	r3, [r2, #4]
 8004aaa:	4408      	add	r0, r1
 8004aac:	6010      	str	r0, [r2, #0]
 8004aae:	e7da      	b.n	8004a66 <_free_r+0x22>
 8004ab0:	d902      	bls.n	8004ab8 <_free_r+0x74>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	e7d6      	b.n	8004a66 <_free_r+0x22>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf04      	itt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	6063      	str	r3, [r4, #4]
 8004ac6:	bf04      	itt	eq
 8004ac8:	1809      	addeq	r1, r1, r0
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7ca      	b.n	8004a66 <_free_r+0x22>
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000368 	.word	0x20000368

08004ad8 <malloc>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	@ (8004ae4 <malloc+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f000 b825 	b.w	8004b2c <_malloc_r>
 8004ae2:	bf00      	nop
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <sbrk_aligned>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4e0f      	ldr	r6, [pc, #60]	@ (8004b28 <sbrk_aligned+0x40>)
 8004aec:	460c      	mov	r4, r1
 8004aee:	6831      	ldr	r1, [r6, #0]
 8004af0:	4605      	mov	r5, r0
 8004af2:	b911      	cbnz	r1, 8004afa <sbrk_aligned+0x12>
 8004af4:	f000 fc64 	bl	80053c0 <_sbrk_r>
 8004af8:	6030      	str	r0, [r6, #0]
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 fc5f 	bl	80053c0 <_sbrk_r>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d103      	bne.n	8004b0e <sbrk_aligned+0x26>
 8004b06:	f04f 34ff 	mov.w	r4, #4294967295
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	1cc4      	adds	r4, r0, #3
 8004b10:	f024 0403 	bic.w	r4, r4, #3
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d0f8      	beq.n	8004b0a <sbrk_aligned+0x22>
 8004b18:	1a21      	subs	r1, r4, r0
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 fc50 	bl	80053c0 <_sbrk_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d1f2      	bne.n	8004b0a <sbrk_aligned+0x22>
 8004b24:	e7ef      	b.n	8004b06 <sbrk_aligned+0x1e>
 8004b26:	bf00      	nop
 8004b28:	20000364 	.word	0x20000364

08004b2c <_malloc_r>:
 8004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b30:	1ccd      	adds	r5, r1, #3
 8004b32:	f025 0503 	bic.w	r5, r5, #3
 8004b36:	3508      	adds	r5, #8
 8004b38:	2d0c      	cmp	r5, #12
 8004b3a:	bf38      	it	cc
 8004b3c:	250c      	movcc	r5, #12
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	4606      	mov	r6, r0
 8004b42:	db01      	blt.n	8004b48 <_malloc_r+0x1c>
 8004b44:	42a9      	cmp	r1, r5
 8004b46:	d904      	bls.n	8004b52 <_malloc_r+0x26>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	6033      	str	r3, [r6, #0]
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c28 <_malloc_r+0xfc>
 8004b56:	f000 f869 	bl	8004c2c <__malloc_lock>
 8004b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5e:	461c      	mov	r4, r3
 8004b60:	bb44      	cbnz	r4, 8004bb4 <_malloc_r+0x88>
 8004b62:	4629      	mov	r1, r5
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff ffbf 	bl	8004ae8 <sbrk_aligned>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	d158      	bne.n	8004c22 <_malloc_r+0xf6>
 8004b70:	f8d8 4000 	ldr.w	r4, [r8]
 8004b74:	4627      	mov	r7, r4
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	d143      	bne.n	8004c02 <_malloc_r+0xd6>
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d04b      	beq.n	8004c16 <_malloc_r+0xea>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	4639      	mov	r1, r7
 8004b82:	4630      	mov	r0, r6
 8004b84:	eb04 0903 	add.w	r9, r4, r3
 8004b88:	f000 fc1a 	bl	80053c0 <_sbrk_r>
 8004b8c:	4581      	cmp	r9, r0
 8004b8e:	d142      	bne.n	8004c16 <_malloc_r+0xea>
 8004b90:	6821      	ldr	r1, [r4, #0]
 8004b92:	1a6d      	subs	r5, r5, r1
 8004b94:	4629      	mov	r1, r5
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ffa6 	bl	8004ae8 <sbrk_aligned>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d03a      	beq.n	8004c16 <_malloc_r+0xea>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	442b      	add	r3, r5
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	bb62      	cbnz	r2, 8004c08 <_malloc_r+0xdc>
 8004bae:	f8c8 7000 	str.w	r7, [r8]
 8004bb2:	e00f      	b.n	8004bd4 <_malloc_r+0xa8>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	1b52      	subs	r2, r2, r5
 8004bb8:	d420      	bmi.n	8004bfc <_malloc_r+0xd0>
 8004bba:	2a0b      	cmp	r2, #11
 8004bbc:	d917      	bls.n	8004bee <_malloc_r+0xc2>
 8004bbe:	1961      	adds	r1, r4, r5
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	6059      	strne	r1, [r3, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	bf08      	it	eq
 8004bcc:	f8c8 1000 	streq.w	r1, [r8]
 8004bd0:	5162      	str	r2, [r4, r5]
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f82f 	bl	8004c38 <__malloc_unlock>
 8004bda:	f104 000b 	add.w	r0, r4, #11
 8004bde:	1d23      	adds	r3, r4, #4
 8004be0:	f020 0007 	bic.w	r0, r0, #7
 8004be4:	1ac2      	subs	r2, r0, r3
 8004be6:	bf1c      	itt	ne
 8004be8:	1a1b      	subne	r3, r3, r0
 8004bea:	50a3      	strne	r3, [r4, r2]
 8004bec:	e7af      	b.n	8004b4e <_malloc_r+0x22>
 8004bee:	6862      	ldr	r2, [r4, #4]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	bf0c      	ite	eq
 8004bf4:	f8c8 2000 	streq.w	r2, [r8]
 8004bf8:	605a      	strne	r2, [r3, #4]
 8004bfa:	e7eb      	b.n	8004bd4 <_malloc_r+0xa8>
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	6864      	ldr	r4, [r4, #4]
 8004c00:	e7ae      	b.n	8004b60 <_malloc_r+0x34>
 8004c02:	463c      	mov	r4, r7
 8004c04:	687f      	ldr	r7, [r7, #4]
 8004c06:	e7b6      	b.n	8004b76 <_malloc_r+0x4a>
 8004c08:	461a      	mov	r2, r3
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	d1fb      	bne.n	8004c08 <_malloc_r+0xdc>
 8004c10:	2300      	movs	r3, #0
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e7de      	b.n	8004bd4 <_malloc_r+0xa8>
 8004c16:	230c      	movs	r3, #12
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f000 f80c 	bl	8004c38 <__malloc_unlock>
 8004c20:	e794      	b.n	8004b4c <_malloc_r+0x20>
 8004c22:	6005      	str	r5, [r0, #0]
 8004c24:	e7d6      	b.n	8004bd4 <_malloc_r+0xa8>
 8004c26:	bf00      	nop
 8004c28:	20000368 	.word	0x20000368

08004c2c <__malloc_lock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	@ (8004c34 <__malloc_lock+0x8>)
 8004c2e:	f7ff bee8 	b.w	8004a02 <__retarget_lock_acquire_recursive>
 8004c32:	bf00      	nop
 8004c34:	20000360 	.word	0x20000360

08004c38 <__malloc_unlock>:
 8004c38:	4801      	ldr	r0, [pc, #4]	@ (8004c40 <__malloc_unlock+0x8>)
 8004c3a:	f7ff bee3 	b.w	8004a04 <__retarget_lock_release_recursive>
 8004c3e:	bf00      	nop
 8004c40:	20000360 	.word	0x20000360

08004c44 <__ssputs_r>:
 8004c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	688e      	ldr	r6, [r1, #8]
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	42be      	cmp	r6, r7
 8004c4e:	680b      	ldr	r3, [r1, #0]
 8004c50:	4682      	mov	sl, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4690      	mov	r8, r2
 8004c56:	d82d      	bhi.n	8004cb4 <__ssputs_r+0x70>
 8004c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c60:	d026      	beq.n	8004cb0 <__ssputs_r+0x6c>
 8004c62:	6965      	ldr	r5, [r4, #20]
 8004c64:	6909      	ldr	r1, [r1, #16]
 8004c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6a:	eba3 0901 	sub.w	r9, r3, r1
 8004c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c72:	1c7b      	adds	r3, r7, #1
 8004c74:	444b      	add	r3, r9
 8004c76:	106d      	asrs	r5, r5, #1
 8004c78:	429d      	cmp	r5, r3
 8004c7a:	bf38      	it	cc
 8004c7c:	461d      	movcc	r5, r3
 8004c7e:	0553      	lsls	r3, r2, #21
 8004c80:	d527      	bpl.n	8004cd2 <__ssputs_r+0x8e>
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7ff ff52 	bl	8004b2c <_malloc_r>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	b360      	cbz	r0, 8004ce6 <__ssputs_r+0xa2>
 8004c8c:	6921      	ldr	r1, [r4, #16]
 8004c8e:	464a      	mov	r2, r9
 8004c90:	f000 fba6 	bl	80053e0 <memcpy>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	6126      	str	r6, [r4, #16]
 8004ca2:	6165      	str	r5, [r4, #20]
 8004ca4:	444e      	add	r6, r9
 8004ca6:	eba5 0509 	sub.w	r5, r5, r9
 8004caa:	6026      	str	r6, [r4, #0]
 8004cac:	60a5      	str	r5, [r4, #8]
 8004cae:	463e      	mov	r6, r7
 8004cb0:	42be      	cmp	r6, r7
 8004cb2:	d900      	bls.n	8004cb6 <__ssputs_r+0x72>
 8004cb4:	463e      	mov	r6, r7
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4641      	mov	r1, r8
 8004cbc:	f000 fb66 	bl	800538c <memmove>
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	1b9b      	subs	r3, r3, r6
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4433      	add	r3, r6
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	f000 fb99 	bl	800540a <_realloc_r>
 8004cd8:	4606      	mov	r6, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1e0      	bne.n	8004ca0 <__ssputs_r+0x5c>
 8004cde:	6921      	ldr	r1, [r4, #16]
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	f7ff feaf 	bl	8004a44 <_free_r>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	f8ca 3000 	str.w	r3, [sl]
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e7e9      	b.n	8004cce <__ssputs_r+0x8a>
	...

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4698      	mov	r8, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	b09d      	sub	sp, #116	@ 0x74
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d510      	bpl.n	8004d32 <_svfiprintf_r+0x36>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b973      	cbnz	r3, 8004d32 <_svfiprintf_r+0x36>
 8004d14:	2140      	movs	r1, #64	@ 0x40
 8004d16:	f7ff ff09 	bl	8004b2c <_malloc_r>
 8004d1a:	6028      	str	r0, [r5, #0]
 8004d1c:	6128      	str	r0, [r5, #16]
 8004d1e:	b930      	cbnz	r0, 8004d2e <_svfiprintf_r+0x32>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	b01d      	add	sp, #116	@ 0x74
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	2340      	movs	r3, #64	@ 0x40
 8004d30:	616b      	str	r3, [r5, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d36:	2320      	movs	r3, #32
 8004d38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d40:	2330      	movs	r3, #48	@ 0x30
 8004d42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ee0 <_svfiprintf_r+0x1e4>
 8004d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d4a:	f04f 0901 	mov.w	r9, #1
 8004d4e:	4623      	mov	r3, r4
 8004d50:	469a      	mov	sl, r3
 8004d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d56:	b10a      	cbz	r2, 8004d5c <_svfiprintf_r+0x60>
 8004d58:	2a25      	cmp	r2, #37	@ 0x25
 8004d5a:	d1f9      	bne.n	8004d50 <_svfiprintf_r+0x54>
 8004d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d60:	d00b      	beq.n	8004d7a <_svfiprintf_r+0x7e>
 8004d62:	465b      	mov	r3, fp
 8004d64:	4622      	mov	r2, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ff6b 	bl	8004c44 <__ssputs_r>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f000 80a7 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d76:	445a      	add	r2, fp
 8004d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 809f 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d8e:	f10a 0a01 	add.w	sl, sl, #1
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	9307      	str	r3, [sp, #28]
 8004d96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d9c:	4654      	mov	r4, sl
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da4:	484e      	ldr	r0, [pc, #312]	@ (8004ee0 <_svfiprintf_r+0x1e4>)
 8004da6:	f7fb fa1b 	bl	80001e0 <memchr>
 8004daa:	9a04      	ldr	r2, [sp, #16]
 8004dac:	b9d8      	cbnz	r0, 8004de6 <_svfiprintf_r+0xea>
 8004dae:	06d0      	lsls	r0, r2, #27
 8004db0:	bf44      	itt	mi
 8004db2:	2320      	movmi	r3, #32
 8004db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db8:	0711      	lsls	r1, r2, #28
 8004dba:	bf44      	itt	mi
 8004dbc:	232b      	movmi	r3, #43	@ 0x2b
 8004dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc8:	d015      	beq.n	8004df6 <_svfiprintf_r+0xfa>
 8004dca:	9a07      	ldr	r2, [sp, #28]
 8004dcc:	4654      	mov	r4, sl
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f04f 0c0a 	mov.w	ip, #10
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dda:	3b30      	subs	r3, #48	@ 0x30
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d94b      	bls.n	8004e78 <_svfiprintf_r+0x17c>
 8004de0:	b1b0      	cbz	r0, 8004e10 <_svfiprintf_r+0x114>
 8004de2:	9207      	str	r2, [sp, #28]
 8004de4:	e014      	b.n	8004e10 <_svfiprintf_r+0x114>
 8004de6:	eba0 0308 	sub.w	r3, r0, r8
 8004dea:	fa09 f303 	lsl.w	r3, r9, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	46a2      	mov	sl, r4
 8004df4:	e7d2      	b.n	8004d9c <_svfiprintf_r+0xa0>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	9103      	str	r1, [sp, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfbb      	ittet	lt
 8004e02:	425b      	neglt	r3, r3
 8004e04:	f042 0202 	orrlt.w	r2, r2, #2
 8004e08:	9307      	strge	r3, [sp, #28]
 8004e0a:	9307      	strlt	r3, [sp, #28]
 8004e0c:	bfb8      	it	lt
 8004e0e:	9204      	strlt	r2, [sp, #16]
 8004e10:	7823      	ldrb	r3, [r4, #0]
 8004e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e14:	d10a      	bne.n	8004e2c <_svfiprintf_r+0x130>
 8004e16:	7863      	ldrb	r3, [r4, #1]
 8004e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e1a:	d132      	bne.n	8004e82 <_svfiprintf_r+0x186>
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	9203      	str	r2, [sp, #12]
 8004e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e28:	3402      	adds	r4, #2
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ef0 <_svfiprintf_r+0x1f4>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f9d3 	bl	80001e0 <memchr>
 8004e3a:	b138      	cbz	r0, 8004e4c <_svfiprintf_r+0x150>
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	eba0 000a 	sub.w	r0, r0, sl
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	4082      	lsls	r2, r0
 8004e46:	4313      	orrs	r3, r2
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	4824      	ldr	r0, [pc, #144]	@ (8004ee4 <_svfiprintf_r+0x1e8>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9c2 	bl	80001e0 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d036      	beq.n	8004ece <_svfiprintf_r+0x1d2>
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <_svfiprintf_r+0x1ec>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_svfiprintf_r+0x1b0>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e72:	4433      	add	r3, r6
 8004e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e76:	e76a      	b.n	8004d4e <_svfiprintf_r+0x52>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a8      	b.n	8004dd4 <_svfiprintf_r+0xd8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	@ 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_svfiprintf_r+0x1a6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c6      	beq.n	8004e2c <_svfiprintf_r+0x130>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c4      	b.n	8004e2c <_svfiprintf_r+0x130>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_svfiprintf_r+0x192>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	1c42      	adds	r2, r0, #1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	d1d6      	bne.n	8004e70 <_svfiprintf_r+0x174>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	065b      	lsls	r3, r3, #25
 8004ec6:	f53f af2d 	bmi.w	8004d24 <_svfiprintf_r+0x28>
 8004eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ecc:	e72c      	b.n	8004d28 <_svfiprintf_r+0x2c>
 8004ece:	ab03      	add	r3, sp, #12
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004ed6:	a904      	add	r1, sp, #16
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f000 f879 	bl	8004fd0 <_printf_i>
 8004ede:	e7ed      	b.n	8004ebc <_svfiprintf_r+0x1c0>
 8004ee0:	08005af3 	.word	0x08005af3
 8004ee4:	08005afd 	.word	0x08005afd
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	08004c45 	.word	0x08004c45
 8004ef0:	08005af9 	.word	0x08005af9

08004ef4 <_printf_common>:
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	4616      	mov	r6, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	688a      	ldr	r2, [r1, #8]
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bfb8      	it	lt
 8004f08:	4613      	movlt	r3, r2
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f10:	4607      	mov	r7, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	b10a      	cbz	r2, 8004f1a <_printf_common+0x26>
 8004f16:	3301      	adds	r3, #1
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	0699      	lsls	r1, r3, #26
 8004f1e:	bf42      	ittt	mi
 8004f20:	6833      	ldrmi	r3, [r6, #0]
 8004f22:	3302      	addmi	r3, #2
 8004f24:	6033      	strmi	r3, [r6, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	f015 0506 	ands.w	r5, r5, #6
 8004f2c:	d106      	bne.n	8004f3c <_printf_common+0x48>
 8004f2e:	f104 0a19 	add.w	sl, r4, #25
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	6832      	ldr	r2, [r6, #0]
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dc26      	bgt.n	8004f8a <_printf_common+0x96>
 8004f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	3b00      	subs	r3, #0
 8004f44:	bf18      	it	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	0692      	lsls	r2, r2, #26
 8004f4a:	d42b      	bmi.n	8004fa4 <_printf_common+0xb0>
 8004f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f50:	4641      	mov	r1, r8
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c8      	blx	r9
 8004f56:	3001      	adds	r0, #1
 8004f58:	d01e      	beq.n	8004f98 <_printf_common+0xa4>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf02      	ittt	eq
 8004f66:	68e5      	ldreq	r5, [r4, #12]
 8004f68:	6833      	ldreq	r3, [r6, #0]
 8004f6a:	1aed      	subeq	r5, r5, r3
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	bf0c      	ite	eq
 8004f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f74:	2500      	movne	r5, #0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfc4      	itt	gt
 8004f7a:	1a9b      	subgt	r3, r3, r2
 8004f7c:	18ed      	addgt	r5, r5, r3
 8004f7e:	2600      	movs	r6, #0
 8004f80:	341a      	adds	r4, #26
 8004f82:	42b5      	cmp	r5, r6
 8004f84:	d11a      	bne.n	8004fbc <_printf_common+0xc8>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e008      	b.n	8004f9c <_printf_common+0xa8>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	4641      	mov	r1, r8
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c8      	blx	r9
 8004f94:	3001      	adds	r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_printf_common+0xac>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	e7c6      	b.n	8004f32 <_printf_common+0x3e>
 8004fa4:	18e1      	adds	r1, r4, r3
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	2030      	movs	r0, #48	@ 0x30
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fae:	4422      	add	r2, r4
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fb8:	3302      	adds	r3, #2
 8004fba:	e7c7      	b.n	8004f4c <_printf_common+0x58>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c8      	blx	r9
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d0e6      	beq.n	8004f98 <_printf_common+0xa4>
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7d9      	b.n	8004f82 <_printf_common+0x8e>
	...

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fd8:	2f78      	cmp	r7, #120	@ 0x78
 8004fda:	4691      	mov	r9, r2
 8004fdc:	4680      	mov	r8, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	469a      	mov	sl, r3
 8004fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	@ 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d2 	beq.w	8005196 <_printf_i+0x1c6>
 8004ff2:	2f58      	cmp	r7, #88	@ 0x58
 8004ff4:	f000 80b9 	beq.w	800516a <_printf_i+0x19a>
 8004ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	@ (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	0800517d 	.word	0x0800517d
 8005040:	080050a7 	.word	0x080050a7
 8005044:	08005137 	.word	0x08005137
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	0800519f 	.word	0x0800519f
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050a7 	.word	0x080050a7
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	0800513f 	.word	0x0800513f
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6032      	str	r2, [r6, #0]
 8005070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e09d      	b.n	80051b8 <_printf_i+0x1e8>
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6031      	str	r1, [r6, #0]
 8005084:	0606      	lsls	r6, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xbc>
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	e003      	b.n	8005094 <_printf_i+0xc4>
 800508c:	0645      	lsls	r5, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xb8>
 8005090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005094:	2d00      	cmp	r5, #0
 8005096:	da03      	bge.n	80050a0 <_printf_i+0xd0>
 8005098:	232d      	movs	r3, #45	@ 0x2d
 800509a:	426d      	negs	r5, r5
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a0:	4859      	ldr	r0, [pc, #356]	@ (8005208 <_printf_i+0x238>)
 80050a2:	230a      	movs	r3, #10
 80050a4:	e011      	b.n	80050ca <_printf_i+0xfa>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	0608      	lsls	r0, r1, #24
 80050ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b0:	d402      	bmi.n	80050b8 <_printf_i+0xe8>
 80050b2:	0649      	lsls	r1, r1, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ba:	4853      	ldr	r0, [pc, #332]	@ (8005208 <_printf_i+0x238>)
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	bf14      	ite	ne
 80050c0:	230a      	movne	r3, #10
 80050c2:	2308      	moveq	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ca:	6866      	ldr	r6, [r4, #4]
 80050cc:	60a6      	str	r6, [r4, #8]
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	bfa2      	ittt	ge
 80050d2:	6821      	ldrge	r1, [r4, #0]
 80050d4:	f021 0104 	bicge.w	r1, r1, #4
 80050d8:	6021      	strge	r1, [r4, #0]
 80050da:	b90d      	cbnz	r5, 80050e0 <_printf_i+0x110>
 80050dc:	2e00      	cmp	r6, #0
 80050de:	d04b      	beq.n	8005178 <_printf_i+0x1a8>
 80050e0:	4616      	mov	r6, r2
 80050e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e6:	fb03 5711 	mls	r7, r3, r1, r5
 80050ea:	5dc7      	ldrb	r7, [r0, r7]
 80050ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f0:	462f      	mov	r7, r5
 80050f2:	42bb      	cmp	r3, r7
 80050f4:	460d      	mov	r5, r1
 80050f6:	d9f4      	bls.n	80050e2 <_printf_i+0x112>
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d10b      	bne.n	8005114 <_printf_i+0x144>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	d508      	bpl.n	8005114 <_printf_i+0x144>
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	4299      	cmp	r1, r3
 8005108:	bfde      	ittt	le
 800510a:	2330      	movle	r3, #48	@ 0x30
 800510c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005114:	1b92      	subs	r2, r2, r6
 8005116:	6122      	str	r2, [r4, #16]
 8005118:	f8cd a000 	str.w	sl, [sp]
 800511c:	464b      	mov	r3, r9
 800511e:	aa03      	add	r2, sp, #12
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fee6 	bl	8004ef4 <_printf_common>
 8005128:	3001      	adds	r0, #1
 800512a:	d14a      	bne.n	80051c2 <_printf_i+0x1f2>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	b004      	add	sp, #16
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	4833      	ldr	r0, [pc, #204]	@ (800520c <_printf_i+0x23c>)
 8005140:	2778      	movs	r7, #120	@ 0x78
 8005142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	6831      	ldr	r1, [r6, #0]
 800514a:	061f      	lsls	r7, r3, #24
 800514c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0x188>
 8005152:	065f      	lsls	r7, r3, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	6031      	str	r1, [r6, #0]
 800515a:	07d9      	lsls	r1, r3, #31
 800515c:	bf44      	itt	mi
 800515e:	f043 0320 	orrmi.w	r3, r3, #32
 8005162:	6023      	strmi	r3, [r4, #0]
 8005164:	b11d      	cbz	r5, 800516e <_printf_i+0x19e>
 8005166:	2310      	movs	r3, #16
 8005168:	e7ac      	b.n	80050c4 <_printf_i+0xf4>
 800516a:	4827      	ldr	r0, [pc, #156]	@ (8005208 <_printf_i+0x238>)
 800516c:	e7e9      	b.n	8005142 <_printf_i+0x172>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	f023 0320 	bic.w	r3, r3, #32
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	e7f6      	b.n	8005166 <_printf_i+0x196>
 8005178:	4616      	mov	r6, r2
 800517a:	e7bd      	b.n	80050f8 <_printf_i+0x128>
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	6961      	ldr	r1, [r4, #20]
 8005182:	1d18      	adds	r0, r3, #4
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	062e      	lsls	r6, r5, #24
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	d501      	bpl.n	8005190 <_printf_i+0x1c0>
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	e002      	b.n	8005196 <_printf_i+0x1c6>
 8005190:	0668      	lsls	r0, r5, #25
 8005192:	d5fb      	bpl.n	800518c <_printf_i+0x1bc>
 8005194:	8019      	strh	r1, [r3, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	4616      	mov	r6, r2
 800519c:	e7bc      	b.n	8005118 <_printf_i+0x148>
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	6032      	str	r2, [r6, #0]
 80051a4:	681e      	ldr	r6, [r3, #0]
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	2100      	movs	r1, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fb f818 	bl	80001e0 <memchr>
 80051b0:	b108      	cbz	r0, 80051b6 <_printf_i+0x1e6>
 80051b2:	1b80      	subs	r0, r0, r6
 80051b4:	6060      	str	r0, [r4, #4]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	2300      	movs	r3, #0
 80051bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c0:	e7aa      	b.n	8005118 <_printf_i+0x148>
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	4632      	mov	r2, r6
 80051c6:	4649      	mov	r1, r9
 80051c8:	4640      	mov	r0, r8
 80051ca:	47d0      	blx	sl
 80051cc:	3001      	adds	r0, #1
 80051ce:	d0ad      	beq.n	800512c <_printf_i+0x15c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	079b      	lsls	r3, r3, #30
 80051d4:	d413      	bmi.n	80051fe <_printf_i+0x22e>
 80051d6:	68e0      	ldr	r0, [r4, #12]
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	4298      	cmp	r0, r3
 80051dc:	bfb8      	it	lt
 80051de:	4618      	movlt	r0, r3
 80051e0:	e7a6      	b.n	8005130 <_printf_i+0x160>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4632      	mov	r2, r6
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	47d0      	blx	sl
 80051ec:	3001      	adds	r0, #1
 80051ee:	d09d      	beq.n	800512c <_printf_i+0x15c>
 80051f0:	3501      	adds	r5, #1
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	9903      	ldr	r1, [sp, #12]
 80051f6:	1a5b      	subs	r3, r3, r1
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dcf2      	bgt.n	80051e2 <_printf_i+0x212>
 80051fc:	e7eb      	b.n	80051d6 <_printf_i+0x206>
 80051fe:	2500      	movs	r5, #0
 8005200:	f104 0619 	add.w	r6, r4, #25
 8005204:	e7f5      	b.n	80051f2 <_printf_i+0x222>
 8005206:	bf00      	nop
 8005208:	08005b04 	.word	0x08005b04
 800520c:	08005b15 	.word	0x08005b15

08005210 <__sflush_r>:
 8005210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005218:	0716      	lsls	r6, r2, #28
 800521a:	4605      	mov	r5, r0
 800521c:	460c      	mov	r4, r1
 800521e:	d454      	bmi.n	80052ca <__sflush_r+0xba>
 8005220:	684b      	ldr	r3, [r1, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	dc02      	bgt.n	800522c <__sflush_r+0x1c>
 8005226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	dd48      	ble.n	80052be <__sflush_r+0xae>
 800522c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800522e:	2e00      	cmp	r6, #0
 8005230:	d045      	beq.n	80052be <__sflush_r+0xae>
 8005232:	2300      	movs	r3, #0
 8005234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005238:	682f      	ldr	r7, [r5, #0]
 800523a:	6a21      	ldr	r1, [r4, #32]
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	d030      	beq.n	80052a2 <__sflush_r+0x92>
 8005240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	0759      	lsls	r1, r3, #29
 8005246:	d505      	bpl.n	8005254 <__sflush_r+0x44>
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800524e:	b10b      	cbz	r3, 8005254 <__sflush_r+0x44>
 8005250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005258:	6a21      	ldr	r1, [r4, #32]
 800525a:	4628      	mov	r0, r5
 800525c:	47b0      	blx	r6
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	d106      	bne.n	8005272 <__sflush_r+0x62>
 8005264:	6829      	ldr	r1, [r5, #0]
 8005266:	291d      	cmp	r1, #29
 8005268:	d82b      	bhi.n	80052c2 <__sflush_r+0xb2>
 800526a:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <__sflush_r+0x104>)
 800526c:	410a      	asrs	r2, r1
 800526e:	07d6      	lsls	r6, r2, #31
 8005270:	d427      	bmi.n	80052c2 <__sflush_r+0xb2>
 8005272:	2200      	movs	r2, #0
 8005274:	6062      	str	r2, [r4, #4]
 8005276:	04d9      	lsls	r1, r3, #19
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	d504      	bpl.n	8005288 <__sflush_r+0x78>
 800527e:	1c42      	adds	r2, r0, #1
 8005280:	d101      	bne.n	8005286 <__sflush_r+0x76>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	b903      	cbnz	r3, 8005288 <__sflush_r+0x78>
 8005286:	6560      	str	r0, [r4, #84]	@ 0x54
 8005288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800528a:	602f      	str	r7, [r5, #0]
 800528c:	b1b9      	cbz	r1, 80052be <__sflush_r+0xae>
 800528e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005292:	4299      	cmp	r1, r3
 8005294:	d002      	beq.n	800529c <__sflush_r+0x8c>
 8005296:	4628      	mov	r0, r5
 8005298:	f7ff fbd4 	bl	8004a44 <_free_r>
 800529c:	2300      	movs	r3, #0
 800529e:	6363      	str	r3, [r4, #52]	@ 0x34
 80052a0:	e00d      	b.n	80052be <__sflush_r+0xae>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b0      	blx	r6
 80052a8:	4602      	mov	r2, r0
 80052aa:	1c50      	adds	r0, r2, #1
 80052ac:	d1c9      	bne.n	8005242 <__sflush_r+0x32>
 80052ae:	682b      	ldr	r3, [r5, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0c6      	beq.n	8005242 <__sflush_r+0x32>
 80052b4:	2b1d      	cmp	r3, #29
 80052b6:	d001      	beq.n	80052bc <__sflush_r+0xac>
 80052b8:	2b16      	cmp	r3, #22
 80052ba:	d11e      	bne.n	80052fa <__sflush_r+0xea>
 80052bc:	602f      	str	r7, [r5, #0]
 80052be:	2000      	movs	r0, #0
 80052c0:	e022      	b.n	8005308 <__sflush_r+0xf8>
 80052c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	e01b      	b.n	8005302 <__sflush_r+0xf2>
 80052ca:	690f      	ldr	r7, [r1, #16]
 80052cc:	2f00      	cmp	r7, #0
 80052ce:	d0f6      	beq.n	80052be <__sflush_r+0xae>
 80052d0:	0793      	lsls	r3, r2, #30
 80052d2:	680e      	ldr	r6, [r1, #0]
 80052d4:	bf08      	it	eq
 80052d6:	694b      	ldreq	r3, [r1, #20]
 80052d8:	600f      	str	r7, [r1, #0]
 80052da:	bf18      	it	ne
 80052dc:	2300      	movne	r3, #0
 80052de:	eba6 0807 	sub.w	r8, r6, r7
 80052e2:	608b      	str	r3, [r1, #8]
 80052e4:	f1b8 0f00 	cmp.w	r8, #0
 80052e8:	dde9      	ble.n	80052be <__sflush_r+0xae>
 80052ea:	6a21      	ldr	r1, [r4, #32]
 80052ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052ee:	4643      	mov	r3, r8
 80052f0:	463a      	mov	r2, r7
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b0      	blx	r6
 80052f6:	2800      	cmp	r0, #0
 80052f8:	dc08      	bgt.n	800530c <__sflush_r+0xfc>
 80052fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530c:	4407      	add	r7, r0
 800530e:	eba8 0800 	sub.w	r8, r8, r0
 8005312:	e7e7      	b.n	80052e4 <__sflush_r+0xd4>
 8005314:	dfbffffe 	.word	0xdfbffffe

08005318 <_fflush_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	4605      	mov	r5, r0
 800531e:	460c      	mov	r4, r1
 8005320:	b913      	cbnz	r3, 8005328 <_fflush_r+0x10>
 8005322:	2500      	movs	r5, #0
 8005324:	4628      	mov	r0, r5
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	b118      	cbz	r0, 8005332 <_fflush_r+0x1a>
 800532a:	6a03      	ldr	r3, [r0, #32]
 800532c:	b90b      	cbnz	r3, 8005332 <_fflush_r+0x1a>
 800532e:	f7ff fa27 	bl	8004780 <__sinit>
 8005332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f3      	beq.n	8005322 <_fflush_r+0xa>
 800533a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800533c:	07d0      	lsls	r0, r2, #31
 800533e:	d404      	bmi.n	800534a <_fflush_r+0x32>
 8005340:	0599      	lsls	r1, r3, #22
 8005342:	d402      	bmi.n	800534a <_fflush_r+0x32>
 8005344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005346:	f7ff fb5c 	bl	8004a02 <__retarget_lock_acquire_recursive>
 800534a:	4628      	mov	r0, r5
 800534c:	4621      	mov	r1, r4
 800534e:	f7ff ff5f 	bl	8005210 <__sflush_r>
 8005352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005354:	07da      	lsls	r2, r3, #31
 8005356:	4605      	mov	r5, r0
 8005358:	d4e4      	bmi.n	8005324 <_fflush_r+0xc>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	059b      	lsls	r3, r3, #22
 800535e:	d4e1      	bmi.n	8005324 <_fflush_r+0xc>
 8005360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005362:	f7ff fb4f 	bl	8004a04 <__retarget_lock_release_recursive>
 8005366:	e7dd      	b.n	8005324 <_fflush_r+0xc>

08005368 <fiprintf>:
 8005368:	b40e      	push	{r1, r2, r3}
 800536a:	b503      	push	{r0, r1, lr}
 800536c:	4601      	mov	r1, r0
 800536e:	ab03      	add	r3, sp, #12
 8005370:	4805      	ldr	r0, [pc, #20]	@ (8005388 <fiprintf+0x20>)
 8005372:	f853 2b04 	ldr.w	r2, [r3], #4
 8005376:	6800      	ldr	r0, [r0, #0]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	f000 f89d 	bl	80054b8 <_vfiprintf_r>
 800537e:	b002      	add	sp, #8
 8005380:	f85d eb04 	ldr.w	lr, [sp], #4
 8005384:	b003      	add	sp, #12
 8005386:	4770      	bx	lr
 8005388:	20000018 	.word	0x20000018

0800538c <memmove>:
 800538c:	4288      	cmp	r0, r1
 800538e:	b510      	push	{r4, lr}
 8005390:	eb01 0402 	add.w	r4, r1, r2
 8005394:	d902      	bls.n	800539c <memmove+0x10>
 8005396:	4284      	cmp	r4, r0
 8005398:	4623      	mov	r3, r4
 800539a:	d807      	bhi.n	80053ac <memmove+0x20>
 800539c:	1e43      	subs	r3, r0, #1
 800539e:	42a1      	cmp	r1, r4
 80053a0:	d008      	beq.n	80053b4 <memmove+0x28>
 80053a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053aa:	e7f8      	b.n	800539e <memmove+0x12>
 80053ac:	4402      	add	r2, r0
 80053ae:	4601      	mov	r1, r0
 80053b0:	428a      	cmp	r2, r1
 80053b2:	d100      	bne.n	80053b6 <memmove+0x2a>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053be:	e7f7      	b.n	80053b0 <memmove+0x24>

080053c0 <_sbrk_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d06      	ldr	r5, [pc, #24]	@ (80053dc <_sbrk_r+0x1c>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fc f890 	bl	80014f0 <_sbrk>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_sbrk_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_sbrk_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	2000035c 	.word	0x2000035c

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f6:	4291      	cmp	r1, r2
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <abort>:
 80053fc:	b508      	push	{r3, lr}
 80053fe:	2006      	movs	r0, #6
 8005400:	f000 fa2e 	bl	8005860 <raise>
 8005404:	2001      	movs	r0, #1
 8005406:	f7fb fffb 	bl	8001400 <_exit>

0800540a <_realloc_r>:
 800540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	4680      	mov	r8, r0
 8005410:	4615      	mov	r5, r2
 8005412:	460c      	mov	r4, r1
 8005414:	b921      	cbnz	r1, 8005420 <_realloc_r+0x16>
 8005416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800541a:	4611      	mov	r1, r2
 800541c:	f7ff bb86 	b.w	8004b2c <_malloc_r>
 8005420:	b92a      	cbnz	r2, 800542e <_realloc_r+0x24>
 8005422:	f7ff fb0f 	bl	8004a44 <_free_r>
 8005426:	2400      	movs	r4, #0
 8005428:	4620      	mov	r0, r4
 800542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542e:	f000 fa33 	bl	8005898 <_malloc_usable_size_r>
 8005432:	4285      	cmp	r5, r0
 8005434:	4606      	mov	r6, r0
 8005436:	d802      	bhi.n	800543e <_realloc_r+0x34>
 8005438:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800543c:	d8f4      	bhi.n	8005428 <_realloc_r+0x1e>
 800543e:	4629      	mov	r1, r5
 8005440:	4640      	mov	r0, r8
 8005442:	f7ff fb73 	bl	8004b2c <_malloc_r>
 8005446:	4607      	mov	r7, r0
 8005448:	2800      	cmp	r0, #0
 800544a:	d0ec      	beq.n	8005426 <_realloc_r+0x1c>
 800544c:	42b5      	cmp	r5, r6
 800544e:	462a      	mov	r2, r5
 8005450:	4621      	mov	r1, r4
 8005452:	bf28      	it	cs
 8005454:	4632      	movcs	r2, r6
 8005456:	f7ff ffc3 	bl	80053e0 <memcpy>
 800545a:	4621      	mov	r1, r4
 800545c:	4640      	mov	r0, r8
 800545e:	f7ff faf1 	bl	8004a44 <_free_r>
 8005462:	463c      	mov	r4, r7
 8005464:	e7e0      	b.n	8005428 <_realloc_r+0x1e>

08005466 <__sfputc_r>:
 8005466:	6893      	ldr	r3, [r2, #8]
 8005468:	3b01      	subs	r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	b410      	push	{r4}
 800546e:	6093      	str	r3, [r2, #8]
 8005470:	da08      	bge.n	8005484 <__sfputc_r+0x1e>
 8005472:	6994      	ldr	r4, [r2, #24]
 8005474:	42a3      	cmp	r3, r4
 8005476:	db01      	blt.n	800547c <__sfputc_r+0x16>
 8005478:	290a      	cmp	r1, #10
 800547a:	d103      	bne.n	8005484 <__sfputc_r+0x1e>
 800547c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005480:	f000 b932 	b.w	80056e8 <__swbuf_r>
 8005484:	6813      	ldr	r3, [r2, #0]
 8005486:	1c58      	adds	r0, r3, #1
 8005488:	6010      	str	r0, [r2, #0]
 800548a:	7019      	strb	r1, [r3, #0]
 800548c:	4608      	mov	r0, r1
 800548e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005492:	4770      	bx	lr

08005494 <__sfputs_r>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
 800549a:	4614      	mov	r4, r2
 800549c:	18d5      	adds	r5, r2, r3
 800549e:	42ac      	cmp	r4, r5
 80054a0:	d101      	bne.n	80054a6 <__sfputs_r+0x12>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e007      	b.n	80054b6 <__sfputs_r+0x22>
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	463a      	mov	r2, r7
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff ffda 	bl	8005466 <__sfputc_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d1f3      	bne.n	800549e <__sfputs_r+0xa>
 80054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054b8 <_vfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	b09d      	sub	sp, #116	@ 0x74
 80054c0:	4614      	mov	r4, r2
 80054c2:	4698      	mov	r8, r3
 80054c4:	4606      	mov	r6, r0
 80054c6:	b118      	cbz	r0, 80054d0 <_vfiprintf_r+0x18>
 80054c8:	6a03      	ldr	r3, [r0, #32]
 80054ca:	b90b      	cbnz	r3, 80054d0 <_vfiprintf_r+0x18>
 80054cc:	f7ff f958 	bl	8004780 <__sinit>
 80054d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d2:	07d9      	lsls	r1, r3, #31
 80054d4:	d405      	bmi.n	80054e2 <_vfiprintf_r+0x2a>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_vfiprintf_r+0x2a>
 80054dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054de:	f7ff fa90 	bl	8004a02 <__retarget_lock_acquire_recursive>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	d501      	bpl.n	80054ec <_vfiprintf_r+0x34>
 80054e8:	692b      	ldr	r3, [r5, #16]
 80054ea:	b99b      	cbnz	r3, 8005514 <_vfiprintf_r+0x5c>
 80054ec:	4629      	mov	r1, r5
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 f938 	bl	8005764 <__swsetup_r>
 80054f4:	b170      	cbz	r0, 8005514 <_vfiprintf_r+0x5c>
 80054f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054f8:	07dc      	lsls	r4, r3, #31
 80054fa:	d504      	bpl.n	8005506 <_vfiprintf_r+0x4e>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b01d      	add	sp, #116	@ 0x74
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	0598      	lsls	r0, r3, #22
 800550a:	d4f7      	bmi.n	80054fc <_vfiprintf_r+0x44>
 800550c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800550e:	f7ff fa79 	bl	8004a04 <__retarget_lock_release_recursive>
 8005512:	e7f3      	b.n	80054fc <_vfiprintf_r+0x44>
 8005514:	2300      	movs	r3, #0
 8005516:	9309      	str	r3, [sp, #36]	@ 0x24
 8005518:	2320      	movs	r3, #32
 800551a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800551e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005522:	2330      	movs	r3, #48	@ 0x30
 8005524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056d4 <_vfiprintf_r+0x21c>
 8005528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800552c:	f04f 0901 	mov.w	r9, #1
 8005530:	4623      	mov	r3, r4
 8005532:	469a      	mov	sl, r3
 8005534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005538:	b10a      	cbz	r2, 800553e <_vfiprintf_r+0x86>
 800553a:	2a25      	cmp	r2, #37	@ 0x25
 800553c:	d1f9      	bne.n	8005532 <_vfiprintf_r+0x7a>
 800553e:	ebba 0b04 	subs.w	fp, sl, r4
 8005542:	d00b      	beq.n	800555c <_vfiprintf_r+0xa4>
 8005544:	465b      	mov	r3, fp
 8005546:	4622      	mov	r2, r4
 8005548:	4629      	mov	r1, r5
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff ffa2 	bl	8005494 <__sfputs_r>
 8005550:	3001      	adds	r0, #1
 8005552:	f000 80a7 	beq.w	80056a4 <_vfiprintf_r+0x1ec>
 8005556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005558:	445a      	add	r2, fp
 800555a:	9209      	str	r2, [sp, #36]	@ 0x24
 800555c:	f89a 3000 	ldrb.w	r3, [sl]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 809f 	beq.w	80056a4 <_vfiprintf_r+0x1ec>
 8005566:	2300      	movs	r3, #0
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005570:	f10a 0a01 	add.w	sl, sl, #1
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	9307      	str	r3, [sp, #28]
 8005578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800557c:	931a      	str	r3, [sp, #104]	@ 0x68
 800557e:	4654      	mov	r4, sl
 8005580:	2205      	movs	r2, #5
 8005582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005586:	4853      	ldr	r0, [pc, #332]	@ (80056d4 <_vfiprintf_r+0x21c>)
 8005588:	f7fa fe2a 	bl	80001e0 <memchr>
 800558c:	9a04      	ldr	r2, [sp, #16]
 800558e:	b9d8      	cbnz	r0, 80055c8 <_vfiprintf_r+0x110>
 8005590:	06d1      	lsls	r1, r2, #27
 8005592:	bf44      	itt	mi
 8005594:	2320      	movmi	r3, #32
 8005596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800559a:	0713      	lsls	r3, r2, #28
 800559c:	bf44      	itt	mi
 800559e:	232b      	movmi	r3, #43	@ 0x2b
 80055a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055a4:	f89a 3000 	ldrb.w	r3, [sl]
 80055a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055aa:	d015      	beq.n	80055d8 <_vfiprintf_r+0x120>
 80055ac:	9a07      	ldr	r2, [sp, #28]
 80055ae:	4654      	mov	r4, sl
 80055b0:	2000      	movs	r0, #0
 80055b2:	f04f 0c0a 	mov.w	ip, #10
 80055b6:	4621      	mov	r1, r4
 80055b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055bc:	3b30      	subs	r3, #48	@ 0x30
 80055be:	2b09      	cmp	r3, #9
 80055c0:	d94b      	bls.n	800565a <_vfiprintf_r+0x1a2>
 80055c2:	b1b0      	cbz	r0, 80055f2 <_vfiprintf_r+0x13a>
 80055c4:	9207      	str	r2, [sp, #28]
 80055c6:	e014      	b.n	80055f2 <_vfiprintf_r+0x13a>
 80055c8:	eba0 0308 	sub.w	r3, r0, r8
 80055cc:	fa09 f303 	lsl.w	r3, r9, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	46a2      	mov	sl, r4
 80055d6:	e7d2      	b.n	800557e <_vfiprintf_r+0xc6>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	1d19      	adds	r1, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9103      	str	r1, [sp, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfbb      	ittet	lt
 80055e4:	425b      	neglt	r3, r3
 80055e6:	f042 0202 	orrlt.w	r2, r2, #2
 80055ea:	9307      	strge	r3, [sp, #28]
 80055ec:	9307      	strlt	r3, [sp, #28]
 80055ee:	bfb8      	it	lt
 80055f0:	9204      	strlt	r2, [sp, #16]
 80055f2:	7823      	ldrb	r3, [r4, #0]
 80055f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80055f6:	d10a      	bne.n	800560e <_vfiprintf_r+0x156>
 80055f8:	7863      	ldrb	r3, [r4, #1]
 80055fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80055fc:	d132      	bne.n	8005664 <_vfiprintf_r+0x1ac>
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	9203      	str	r2, [sp, #12]
 8005606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800560a:	3402      	adds	r4, #2
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056e4 <_vfiprintf_r+0x22c>
 8005612:	7821      	ldrb	r1, [r4, #0]
 8005614:	2203      	movs	r2, #3
 8005616:	4650      	mov	r0, sl
 8005618:	f7fa fde2 	bl	80001e0 <memchr>
 800561c:	b138      	cbz	r0, 800562e <_vfiprintf_r+0x176>
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	eba0 000a 	sub.w	r0, r0, sl
 8005624:	2240      	movs	r2, #64	@ 0x40
 8005626:	4082      	lsls	r2, r0
 8005628:	4313      	orrs	r3, r2
 800562a:	3401      	adds	r4, #1
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005632:	4829      	ldr	r0, [pc, #164]	@ (80056d8 <_vfiprintf_r+0x220>)
 8005634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005638:	2206      	movs	r2, #6
 800563a:	f7fa fdd1 	bl	80001e0 <memchr>
 800563e:	2800      	cmp	r0, #0
 8005640:	d03f      	beq.n	80056c2 <_vfiprintf_r+0x20a>
 8005642:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <_vfiprintf_r+0x224>)
 8005644:	bb1b      	cbnz	r3, 800568e <_vfiprintf_r+0x1d6>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	3307      	adds	r3, #7
 800564a:	f023 0307 	bic.w	r3, r3, #7
 800564e:	3308      	adds	r3, #8
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005654:	443b      	add	r3, r7
 8005656:	9309      	str	r3, [sp, #36]	@ 0x24
 8005658:	e76a      	b.n	8005530 <_vfiprintf_r+0x78>
 800565a:	fb0c 3202 	mla	r2, ip, r2, r3
 800565e:	460c      	mov	r4, r1
 8005660:	2001      	movs	r0, #1
 8005662:	e7a8      	b.n	80055b6 <_vfiprintf_r+0xfe>
 8005664:	2300      	movs	r3, #0
 8005666:	3401      	adds	r4, #1
 8005668:	9305      	str	r3, [sp, #20]
 800566a:	4619      	mov	r1, r3
 800566c:	f04f 0c0a 	mov.w	ip, #10
 8005670:	4620      	mov	r0, r4
 8005672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005676:	3a30      	subs	r2, #48	@ 0x30
 8005678:	2a09      	cmp	r2, #9
 800567a:	d903      	bls.n	8005684 <_vfiprintf_r+0x1cc>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0c6      	beq.n	800560e <_vfiprintf_r+0x156>
 8005680:	9105      	str	r1, [sp, #20]
 8005682:	e7c4      	b.n	800560e <_vfiprintf_r+0x156>
 8005684:	fb0c 2101 	mla	r1, ip, r1, r2
 8005688:	4604      	mov	r4, r0
 800568a:	2301      	movs	r3, #1
 800568c:	e7f0      	b.n	8005670 <_vfiprintf_r+0x1b8>
 800568e:	ab03      	add	r3, sp, #12
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	462a      	mov	r2, r5
 8005694:	4b12      	ldr	r3, [pc, #72]	@ (80056e0 <_vfiprintf_r+0x228>)
 8005696:	a904      	add	r1, sp, #16
 8005698:	4630      	mov	r0, r6
 800569a:	f3af 8000 	nop.w
 800569e:	4607      	mov	r7, r0
 80056a0:	1c78      	adds	r0, r7, #1
 80056a2:	d1d6      	bne.n	8005652 <_vfiprintf_r+0x19a>
 80056a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	d405      	bmi.n	80056b6 <_vfiprintf_r+0x1fe>
 80056aa:	89ab      	ldrh	r3, [r5, #12]
 80056ac:	059a      	lsls	r2, r3, #22
 80056ae:	d402      	bmi.n	80056b6 <_vfiprintf_r+0x1fe>
 80056b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056b2:	f7ff f9a7 	bl	8004a04 <__retarget_lock_release_recursive>
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	065b      	lsls	r3, r3, #25
 80056ba:	f53f af1f 	bmi.w	80054fc <_vfiprintf_r+0x44>
 80056be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056c0:	e71e      	b.n	8005500 <_vfiprintf_r+0x48>
 80056c2:	ab03      	add	r3, sp, #12
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	462a      	mov	r2, r5
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <_vfiprintf_r+0x228>)
 80056ca:	a904      	add	r1, sp, #16
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff fc7f 	bl	8004fd0 <_printf_i>
 80056d2:	e7e4      	b.n	800569e <_vfiprintf_r+0x1e6>
 80056d4:	08005af3 	.word	0x08005af3
 80056d8:	08005afd 	.word	0x08005afd
 80056dc:	00000000 	.word	0x00000000
 80056e0:	08005495 	.word	0x08005495
 80056e4:	08005af9 	.word	0x08005af9

080056e8 <__swbuf_r>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	460e      	mov	r6, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	4605      	mov	r5, r0
 80056f0:	b118      	cbz	r0, 80056fa <__swbuf_r+0x12>
 80056f2:	6a03      	ldr	r3, [r0, #32]
 80056f4:	b90b      	cbnz	r3, 80056fa <__swbuf_r+0x12>
 80056f6:	f7ff f843 	bl	8004780 <__sinit>
 80056fa:	69a3      	ldr	r3, [r4, #24]
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	071a      	lsls	r2, r3, #28
 8005702:	d501      	bpl.n	8005708 <__swbuf_r+0x20>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	b943      	cbnz	r3, 800571a <__swbuf_r+0x32>
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f82a 	bl	8005764 <__swsetup_r>
 8005710:	b118      	cbz	r0, 800571a <__swbuf_r+0x32>
 8005712:	f04f 37ff 	mov.w	r7, #4294967295
 8005716:	4638      	mov	r0, r7
 8005718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	6922      	ldr	r2, [r4, #16]
 800571e:	1a98      	subs	r0, r3, r2
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	b2f6      	uxtb	r6, r6
 8005724:	4283      	cmp	r3, r0
 8005726:	4637      	mov	r7, r6
 8005728:	dc05      	bgt.n	8005736 <__swbuf_r+0x4e>
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff fdf3 	bl	8005318 <_fflush_r>
 8005732:	2800      	cmp	r0, #0
 8005734:	d1ed      	bne.n	8005712 <__swbuf_r+0x2a>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60a3      	str	r3, [r4, #8]
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	701e      	strb	r6, [r3, #0]
 8005744:	6962      	ldr	r2, [r4, #20]
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	429a      	cmp	r2, r3
 800574a:	d004      	beq.n	8005756 <__swbuf_r+0x6e>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d5e1      	bpl.n	8005716 <__swbuf_r+0x2e>
 8005752:	2e0a      	cmp	r6, #10
 8005754:	d1df      	bne.n	8005716 <__swbuf_r+0x2e>
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fddd 	bl	8005318 <_fflush_r>
 800575e:	2800      	cmp	r0, #0
 8005760:	d0d9      	beq.n	8005716 <__swbuf_r+0x2e>
 8005762:	e7d6      	b.n	8005712 <__swbuf_r+0x2a>

08005764 <__swsetup_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4b29      	ldr	r3, [pc, #164]	@ (800580c <__swsetup_r+0xa8>)
 8005768:	4605      	mov	r5, r0
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	460c      	mov	r4, r1
 800576e:	b118      	cbz	r0, 8005778 <__swsetup_r+0x14>
 8005770:	6a03      	ldr	r3, [r0, #32]
 8005772:	b90b      	cbnz	r3, 8005778 <__swsetup_r+0x14>
 8005774:	f7ff f804 	bl	8004780 <__sinit>
 8005778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577c:	0719      	lsls	r1, r3, #28
 800577e:	d422      	bmi.n	80057c6 <__swsetup_r+0x62>
 8005780:	06da      	lsls	r2, r3, #27
 8005782:	d407      	bmi.n	8005794 <__swsetup_r+0x30>
 8005784:	2209      	movs	r2, #9
 8005786:	602a      	str	r2, [r5, #0]
 8005788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	f04f 30ff 	mov.w	r0, #4294967295
 8005792:	e033      	b.n	80057fc <__swsetup_r+0x98>
 8005794:	0758      	lsls	r0, r3, #29
 8005796:	d512      	bpl.n	80057be <__swsetup_r+0x5a>
 8005798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800579a:	b141      	cbz	r1, 80057ae <__swsetup_r+0x4a>
 800579c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <__swsetup_r+0x46>
 80057a4:	4628      	mov	r0, r5
 80057a6:	f7ff f94d 	bl	8004a44 <_free_r>
 80057aa:	2300      	movs	r3, #0
 80057ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	2300      	movs	r3, #0
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f043 0308 	orr.w	r3, r3, #8
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	b94b      	cbnz	r3, 80057de <__swsetup_r+0x7a>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d4:	d003      	beq.n	80057de <__swsetup_r+0x7a>
 80057d6:	4621      	mov	r1, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 f88b 	bl	80058f4 <__smakebuf_r>
 80057de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e2:	f013 0201 	ands.w	r2, r3, #1
 80057e6:	d00a      	beq.n	80057fe <__swsetup_r+0x9a>
 80057e8:	2200      	movs	r2, #0
 80057ea:	60a2      	str	r2, [r4, #8]
 80057ec:	6962      	ldr	r2, [r4, #20]
 80057ee:	4252      	negs	r2, r2
 80057f0:	61a2      	str	r2, [r4, #24]
 80057f2:	6922      	ldr	r2, [r4, #16]
 80057f4:	b942      	cbnz	r2, 8005808 <__swsetup_r+0xa4>
 80057f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057fa:	d1c5      	bne.n	8005788 <__swsetup_r+0x24>
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	0799      	lsls	r1, r3, #30
 8005800:	bf58      	it	pl
 8005802:	6962      	ldrpl	r2, [r4, #20]
 8005804:	60a2      	str	r2, [r4, #8]
 8005806:	e7f4      	b.n	80057f2 <__swsetup_r+0x8e>
 8005808:	2000      	movs	r0, #0
 800580a:	e7f7      	b.n	80057fc <__swsetup_r+0x98>
 800580c:	20000018 	.word	0x20000018

08005810 <_raise_r>:
 8005810:	291f      	cmp	r1, #31
 8005812:	b538      	push	{r3, r4, r5, lr}
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	d904      	bls.n	8005824 <_raise_r+0x14>
 800581a:	2316      	movs	r3, #22
 800581c:	6003      	str	r3, [r0, #0]
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005826:	b112      	cbz	r2, 800582e <_raise_r+0x1e>
 8005828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800582c:	b94b      	cbnz	r3, 8005842 <_raise_r+0x32>
 800582e:	4628      	mov	r0, r5
 8005830:	f000 f830 	bl	8005894 <_getpid_r>
 8005834:	4622      	mov	r2, r4
 8005836:	4601      	mov	r1, r0
 8005838:	4628      	mov	r0, r5
 800583a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583e:	f000 b817 	b.w	8005870 <_kill_r>
 8005842:	2b01      	cmp	r3, #1
 8005844:	d00a      	beq.n	800585c <_raise_r+0x4c>
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	d103      	bne.n	8005852 <_raise_r+0x42>
 800584a:	2316      	movs	r3, #22
 800584c:	6003      	str	r3, [r0, #0]
 800584e:	2001      	movs	r0, #1
 8005850:	e7e7      	b.n	8005822 <_raise_r+0x12>
 8005852:	2100      	movs	r1, #0
 8005854:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005858:	4620      	mov	r0, r4
 800585a:	4798      	blx	r3
 800585c:	2000      	movs	r0, #0
 800585e:	e7e0      	b.n	8005822 <_raise_r+0x12>

08005860 <raise>:
 8005860:	4b02      	ldr	r3, [pc, #8]	@ (800586c <raise+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f7ff bfd3 	b.w	8005810 <_raise_r>
 800586a:	bf00      	nop
 800586c:	20000018 	.word	0x20000018

08005870 <_kill_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4d07      	ldr	r5, [pc, #28]	@ (8005890 <_kill_r+0x20>)
 8005874:	2300      	movs	r3, #0
 8005876:	4604      	mov	r4, r0
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	f7fb fdaf 	bl	80013e0 <_kill>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d102      	bne.n	800588c <_kill_r+0x1c>
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	b103      	cbz	r3, 800588c <_kill_r+0x1c>
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	bd38      	pop	{r3, r4, r5, pc}
 800588e:	bf00      	nop
 8005890:	2000035c 	.word	0x2000035c

08005894 <_getpid_r>:
 8005894:	f7fb bd9c 	b.w	80013d0 <_getpid>

08005898 <_malloc_usable_size_r>:
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f18      	subs	r0, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbc      	itt	lt
 80058a2:	580b      	ldrlt	r3, [r1, r0]
 80058a4:	18c0      	addlt	r0, r0, r3
 80058a6:	4770      	bx	lr

080058a8 <__swhatbuf_r>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	460c      	mov	r4, r1
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	2900      	cmp	r1, #0
 80058b2:	b096      	sub	sp, #88	@ 0x58
 80058b4:	4615      	mov	r5, r2
 80058b6:	461e      	mov	r6, r3
 80058b8:	da0d      	bge.n	80058d6 <__swhatbuf_r+0x2e>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	bf14      	ite	ne
 80058c6:	2340      	movne	r3, #64	@ 0x40
 80058c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058cc:	2000      	movs	r0, #0
 80058ce:	6031      	str	r1, [r6, #0]
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	b016      	add	sp, #88	@ 0x58
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	466a      	mov	r2, sp
 80058d8:	f000 f848 	bl	800596c <_fstat_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	dbec      	blt.n	80058ba <__swhatbuf_r+0x12>
 80058e0:	9901      	ldr	r1, [sp, #4]
 80058e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058ea:	4259      	negs	r1, r3
 80058ec:	4159      	adcs	r1, r3
 80058ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f2:	e7eb      	b.n	80058cc <__swhatbuf_r+0x24>

080058f4 <__smakebuf_r>:
 80058f4:	898b      	ldrh	r3, [r1, #12]
 80058f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058f8:	079d      	lsls	r5, r3, #30
 80058fa:	4606      	mov	r6, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	d507      	bpl.n	8005910 <__smakebuf_r+0x1c>
 8005900:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	2301      	movs	r3, #1
 800590a:	6163      	str	r3, [r4, #20]
 800590c:	b003      	add	sp, #12
 800590e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005910:	ab01      	add	r3, sp, #4
 8005912:	466a      	mov	r2, sp
 8005914:	f7ff ffc8 	bl	80058a8 <__swhatbuf_r>
 8005918:	9f00      	ldr	r7, [sp, #0]
 800591a:	4605      	mov	r5, r0
 800591c:	4639      	mov	r1, r7
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff f904 	bl	8004b2c <_malloc_r>
 8005924:	b948      	cbnz	r0, 800593a <__smakebuf_r+0x46>
 8005926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800592a:	059a      	lsls	r2, r3, #22
 800592c:	d4ee      	bmi.n	800590c <__smakebuf_r+0x18>
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	f043 0302 	orr.w	r3, r3, #2
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	e7e2      	b.n	8005900 <__smakebuf_r+0xc>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	6020      	str	r0, [r4, #0]
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	9b01      	ldr	r3, [sp, #4]
 8005946:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800594a:	b15b      	cbz	r3, 8005964 <__smakebuf_r+0x70>
 800594c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f81d 	bl	8005990 <_isatty_r>
 8005956:	b128      	cbz	r0, 8005964 <__smakebuf_r+0x70>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	431d      	orrs	r5, r3
 8005968:	81a5      	strh	r5, [r4, #12]
 800596a:	e7cf      	b.n	800590c <__smakebuf_r+0x18>

0800596c <_fstat_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d07      	ldr	r5, [pc, #28]	@ (800598c <_fstat_r+0x20>)
 8005970:	2300      	movs	r3, #0
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	602b      	str	r3, [r5, #0]
 800597a:	f7fb fd91 	bl	80014a0 <_fstat>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	d102      	bne.n	8005988 <_fstat_r+0x1c>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	b103      	cbz	r3, 8005988 <_fstat_r+0x1c>
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	bf00      	nop
 800598c:	2000035c 	.word	0x2000035c

08005990 <_isatty_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	@ (80059ac <_isatty_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb fd90 	bl	80014c0 <_isatty>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_isatty_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_isatty_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	2000035c 	.word	0x2000035c

080059b0 <_gettimeofday>:
 80059b0:	4b02      	ldr	r3, [pc, #8]	@ (80059bc <_gettimeofday+0xc>)
 80059b2:	2258      	movs	r2, #88	@ 0x58
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ba:	4770      	bx	lr
 80059bc:	2000035c 	.word	0x2000035c

080059c0 <_init>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr

080059cc <_fini>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr
